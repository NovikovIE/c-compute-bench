all_benchmarks = {
    "Numerical Analysis": (
        "Algorithms for approximating solutions to problems in continuous mathematics, fundamental to scientific computing and engineering. This includes solving systems of equations, interpolation, integration, and differential equations.",
        {
            "linear_solver": ["matrix_size", "vector_size"],
            "lu_decomposition": ["matrix_size"],
            "qr_factorization": ["matrix_size"],
            "eigenvalue_solver": ["matrix_size"],
            "singular_value_decomposition": ["matrix_height", "matrix_width"],
            "fast_fourier_transform": ["array_size", "dimensions"],
            "inverse_fast_fourier_transform": ["array_size", "dimensions"],
            "convolution": ["first_array_size", "second_array_size"],
            "polynomial_interpolation": ["num_points", "degree"],
            "cubic_spline_interpolation": ["num_points"],
            "numerical_integration_trapezoidal": ["function_str", "lower_bound", "upper_bound", "num_intervals"],
            "numerical_integration_simpson": ["function_str", "lower_bound", "upper_bound", "num_intervals"],
            "romberg_integration": ["function_str", "lower_bound", "upper_bound", "max_steps"],
            "gaussian_quadrature": ["function_str", "lower_bound", "upper_bound", "num_points"],
            "root_finding_bisection": ["function_str", "lower_bound", "upper_bound", "tolerance"],
            "root_finding_newton_raphson": ["function_str", "initial_guess", "tolerance"],
            "ordinary_differential_equation_euler": ["function_str", "initial_y", "start_x", "end_x", "step_size"],
            "ordinary_differential_equation_runge_kutta": ["function_str", "initial_y", "start_x", "end_x", "step_size"],
            "partial_differential_equation_finite_difference": ["grid_size_x", "grid_size_y", "time_steps"]
        }
    ),
    "Machine Learning": (
        "Algorithms that allow computer systems to learn patterns and make decisions from data without being explicitly programmed. This theme covers training and prediction tasks for various models, from simple classifiers to complex neural networks.",
        {
            "knn_classification": ["num_training_points", "num_test_points", "num_features", "k_neighbors"],
            "svm_linear_train": ["num_samples", "num_features", "num_iterations"],
            "svm_rbf_kernel_train": ["num_samples", "num_features", "gamma", "cost"],
            "decision_tree_train": ["num_samples", "num_features", "max_depth"],
            "logistic_regression_train": ["num_samples", "num_features", "num_epochs", "learning_rate"],
            "naive_bayes_train": ["num_samples", "num_features", "num_classes"],
            "random_forest_train": ["num_samples", "num_features", "num_trees", "max_depth"],
            "mlp_classifier_train": ["num_samples", "num_features", "num_hidden_layers", "hidden_layer_size", "num_epochs"],
            "mlp_classifier_predict": ["num_samples", "num_features", "num_hidden_layers", "hidden_layer_size"],
            "linear_regression_sgd": ["num_samples", "num_features", "num_epochs"],
            "polynomial_regression": ["num_samples", "num_features", "degree"],
            "ridge_regression": ["num_samples", "num_features", "num_epochs", "alpha"],
            "svr_train": ["num_samples", "num_features", "gamma", "cost"],
            "k_means_clustering": ["num_points", "num_features", "num_clusters", "max_iterations"],
            "hierarchical_clustering": ["num_points", "num_features"],
            "dbscan_clustering": ["num_points", "num_features", "epsilon", "min_samples"],
            "gaussian_mixture_model": ["num_points", "num_features", "num_clusters", "max_iterations"],
            "pca": ["num_samples", "num_features", "num_components"],
            "t_sne": ["num_samples", "num_features", "perplexity", "num_iterations"],
            "matrix_multiplication": ["matrix_m_dim", "matrix_k_dim", "matrix_n_dim"],
            "convolution_2d": ["image_height", "image_width", "input_channels", "output_channels", "kernel_size", "stride"],
            "max_pooling_2d": ["input_height", "input_width", "channels", "pool_size"],
            "relu_activation_batch": ["num_neurons", "batch_size"],
            "softmax_activation_batch": ["num_classes", "batch_size"],
            "batch_normalization": ["num_features", "batch_size"],
            "lstm_cell_forward_pass": ["batch_size", "input_features", "output_features"],
            "gru_cell_forward_pass": ["batch_size", "input_features", "output_features"],
            "transformer_encoder_layer_forward": ["batch_size", "sequence_length", "embedding_dim", "num_heads"],
            "backpropagation_feedforward": ["num_samples", "num_features", "num_hidden_layers", "hidden_layer_size"],
            "adaboost_train": ["num_samples", "num_features", "num_estimators"],
            "gradient_boosting_train": ["num_samples", "num_features", "num_trees", "max_depth", "learning_rate"],
            "collaborative_filtering_als": ["num_users", "num_items", "num_ratings", "num_factors", "num_iterations"],
            "genetic_algorithm": ["population_size", "num_genes", "num_generations"]
        }
    ),
    "Statistical Modeling": (
        "Computational methods for estimating parameters, testing hypotheses, and making predictions based on statistical principles and data. This includes resampling methods and computationally intensive Bayesian techniques.",
        {
            "metropolis_hastings_mcmc": ["num_samples", "num_burn_in", "num_parameters"],
            "gibbs_sampling": ["num_samples", "num_burn_in", "num_variables"],
            "bayesian_linear_regression": ["num_samples", "num_predictors", "mcmc_iterations"],
            "variational_inference": ["num_data_points", "num_parameters", "num_iterations"],
            "hamiltonian_monte_carlo": ["num_samples", "num_burn_in", "num_leapfrog_steps", "step_size", "num_parameters"],
            "bootstrap_mean": ["num_data_points", "num_bootstrap_samples"],
            "bootstrap_regression_coeffs": ["num_data_points", "num_predictors", "num_bootstrap_samples"],
            "permutation_test_two_sample": ["sample1_size", "sample2_size", "num_permutations"],
            "jackknife_resampling": ["num_data_points"],
            "maximum_likelihood_estimation": ["num_data_points", "num_parameters", "max_iterations"],
            "expectation_maximization_gmm": ["num_data_points", "num_features", "num_clusters", "max_iterations"],
            "kalman_filter": ["num_time_steps", "num_state_variables", "num_observation_variables"],
            "arima_simulation": ["num_time_steps", "p_order", "d_order", "q_order"],
            "seasonal_decomposition": ["num_time_steps", "period"],
            "autocorrelation_calculation": ["num_time_steps", "max_lag"],
            "kernel_density_estimation": ["num_data_points", "num_grid_points", "bandwidth"],
            "loess_smoothing": ["num_data_points", "span"],
            "kaplan_meier_estimator": ["num_subjects", "num_events"],
            "cox_proportional_hazards_fit": ["num_subjects", "num_predictors", "num_iterations"],
            "chi_squared_test_monte_carlo": ["num_rows", "num_cols", "num_simulations"],
            "anova_permutation_test": ["num_groups", "num_samples_per_group", "num_permutations"]
        }
    ),
    "Combinatorial Enumeration": (
        "The field of counting and generating combinatorial objects, often involving factorially or exponentially growing search spaces. These problems test raw computational power on discrete structures.",
        {
            "generate_permutations": ["num_elements"],
            "generate_combinations": ["n_total_elements", "k_selection_size"],
            "generate_power_set": ["num_elements"],
            "n_queens_enumeration": ["board_size"],
            "enumerate_hamiltonian_cycles": ["num_vertices", "graph_density"],
            "enumerate_graph_colorings": ["num_vertices", "num_edges", "num_colors"],
            "integer_partitions": ["target_integer"],
            "enumerate_spanning_trees": ["num_vertices", "num_edges"],
            "knapsack_01_bruteforce": ["num_items", "max_weight"],
            "generate_dyck_paths": ["num_pairs"],
            "solve_sudoku_bruteforce": ["board_size", "num_prefilled_cells"],
            "enumerate_cliques": ["num_vertices", "graph_density"],
            "generate_balanced_parentheses": ["num_pairs"],
            "enumerate_set_covers": ["num_universe_elements", "num_subsets"],
            "traveling_salesperson_bruteforce": ["num_cities"],
            "bipartite_matching_enumeration": ["num_vertices_partition1", "num_vertices_partition2", "graph_density"]
        }
    ),
    "Physical Modeling and Simulations": (
        "Simulating physical systems governed by the laws of nature, from the scale of atoms (molecular dynamics) to galaxies (N-body simulations), and including fluid dynamics and solid mechanics.",
        {
            "n_body_simulation_brute_force": ["num_bodies", "num_time_steps", "time_delta"],
            "n_body_simulation_barnes_hut": ["num_bodies", "num_time_steps", "time_delta", "theta_parameter"],
            "galaxy_collision_simulation": ["num_stars_galaxy1", "num_stars_galaxy2", "num_time_steps"],
            "lennard_jones_fluid": ["num_particles", "num_time_steps", "box_size", "cutoff_radius"],
            "brownian_motion_simulation": ["num_particles", "num_time_steps"],
            "protein_folding_simplified": ["num_amino_acids", "num_simulation_steps"],
            "monte_carlo_hard_spheres": ["num_particles", "num_mc_cycles", "box_size"],
            "lattice_boltzmann_flow": ["grid_dim_x", "grid_dim_y", "num_time_steps", "reynolds_number"],
            "navier_stokes_solver_2d": ["grid_dim_x", "grid_dim_y", "num_time_steps", "viscosity"],
            "smoothed_particle_hydrodynamics": ["num_particles", "num_time_steps"],
            "vortex_method_simulation": ["num_vortices", "num_time_steps"],
            "fea_truss_analysis": ["num_nodes", "num_elements"],
            "fea_heat_conduction_2d": ["mesh_size_x", "mesh_size_y", "num_time_steps"],
            "elastic_collision_simulation_2d": ["num_balls", "num_time_steps"],
            "crack_propagation_simulation": ["mesh_elements", "num_load_steps"],
            "fdtd_electromagnetic_wave_2d": ["grid_dim_x", "grid_dim_y", "num_time_steps"],
            "particle_in_cell_plasma": ["num_particles", "grid_size", "num_time_steps"],
            "magnetohydrodynamics_2d": ["grid_dim_x", "grid_dim_y", "num_time_steps"],
            "schrodinger_equation_solver_1d": ["grid_points", "num_time_steps"],
            "quantum_tunneling_simulation": ["grid_points", "barrier_width", "num_time_steps"],
            "quantum_monte_carlo": ["num_walkers", "num_time_steps", "num_dimensions"],
            "ising_model_2d_metropolis": ["lattice_size", "num_mc_steps", "temperature"],
            "ising_model_3d_metropolis": ["lattice_size", "num_mc_steps", "temperature"],
            "percolation_simulation": ["grid_size_x", "grid_size_y", "num_trials"],
            "wave_equation_solver_2d": ["grid_dim_x", "grid_dim_y", "num_time_steps"],
            "acoustic_ray_tracing": ["num_rays", "num_reflections", "room_complexity"],
            "doppler_effect_simulation": ["num_time_steps", "source_velocity", "observer_velocity"]
        }
    ),
    "Cryptography": (
        "The practice and study of techniques for secure communication, involving computationally hard problems like integer factorization, discrete logarithms, and brute-forcing cryptographic hashes and ciphers.",
        {
            "aes_bruteforce": ["key_space_bits_to_search", "ciphertext_hex"],
            "des_bruteforce": ["key_space_bits_to_search", "ciphertext_hex"],
            "triple_des_bruteforce": ["key_space_bits_to_search", "ciphertext_hex"],
            "rsa_key_generation": ["key_bit_length"],
            "rsa_encrypt": ["key_bit_length", "data_size_bytes"],
            "rsa_decrypt": ["key_bit_length", "data_size_bytes"],
            "diffie_hellman_key_exchange": ["prime_bit_length"],
            "sha256_proof_of_work": ["difficulty_leading_zeros", "data_block_size"],
            "sha3_proof_of_work": ["difficulty_leading_zeros", "data_block_size"],
            "blake2b_proof_of_work": ["difficulty_leading_zeros", "data_block_size"],
            "integer_factorization_trial_division": ["number_bit_length"],
            "pollards_rho_factorization": ["number_bit_length"],
            "general_number_field_sieve_simulation": ["number_bit_length"],
            "ecc_scalar_multiplication": ["curve_bit_length"],
            "ecdsa_key_generation": ["curve_bit_length"],
            "ecdsa_sign_message": ["curve_bit_length", "message_size_bytes"],
            "ecdsa_verify_signature": ["curve_bit_length", "message_size_bytes"],
            "pbkdf2_hashing": ["password_length", "salt_length", "iterations"],
            "bcrypt_hashing": ["cost_factor"],
            "scrypt_hashing": ["cpu_memory_cost_n", "block_size_r", "parallelization_p"],
            "argon2_hashing": ["memory_cost_m", "time_cost_t", "parallelism_p"],
            "discrete_logarithm_bruteforce": ["prime_field_bit_length"]
        }
    ),
    "Bioinformatics": (
        "Applying computer science to biological data, especially genomic, transcriptomic, and proteomic data. This includes sequence alignment, phylogenetic tree construction, and genome assembly, all of which are computationally demanding.",
        {
            "needleman_wunsch_global_alignment": ["sequence1_length", "sequence2_length"],
            "smith_waterman_local_alignment": ["sequence1_length", "sequence2_length"],
            "multiple_sequence_alignment_progressive": ["num_sequences", "average_sequence_length"],
            "blast_like_database_search": ["query_sequence_length", "database_size_in_mb", "word_size"],
            "neighbor_joining_tree_build": ["num_taxa"],
            "parsimony_tree_heuristic_search": ["num_taxa", "sequence_length"],
            "maximum_likelihood_phylogeny_evaluation": ["num_taxa", "sequence_length", "num_iterations"],
            "bayesian_phylogenetics_mcmc": ["num_taxa", "sequence_length", "num_mcmc_generations"],
            "de_bruijn_graph_construction": ["num_reads", "read_length", "kmer_size"],
            "kmer_counting": ["genome_size_mb", "kmer_size"],
            "short_read_mapping_to_reference": ["num_reads", "read_length", "reference_genome_size_mb"],
            "variant_calling_pileup": ["genome_region_length", "read_depth"],
            "rna_secondary_structure_folding": ["sequence_length"],
            "protein_contact_map_calculation": ["protein_sequence_length"],
            "protein_threading_alignment": ["protein_sequence_length", "num_structural_templates"],
            "molecular_docking_simulation": ["ligand_atoms", "receptor_atoms", "search_space_size"],
            "motif_finding_gibbs_sampling": ["num_sequences", "average_sequence_length", "motif_length", "num_iterations"],
            "tandem_repeat_finding": ["sequence_length", "max_pattern_size"],
            "coalescent_simulation": ["sample_size", "num_loci", "num_generations"],
            "genotype_phasing": ["num_individuals", "num_snps"]
        }
    ),
    "Computer Graphics": (
        "Algorithms for generating and manipulating visual images. This theme focuses on rendering techniques like ray tracing, rasterization pipelines, and physics simulations used to create realistic visual effects.",
        {
            "ray_tracing_simple": ["image_width", "image_height", "num_objects", "max_recursion_depth"],
            "path_tracing": ["image_width", "image_height", "num_objects", "samples_per_pixel", "max_bounces"],
            "ambient_occlusion_ray_casting": ["image_width", "image_height", "num_samples_per_point", "num_objects"],
            "photon_mapping": ["image_width", "image_height", "num_photons_to_emit", "k_nearest_neighbors"],
            "bidirectional_path_tracing": ["image_width", "image_height", "num_objects", "samples_per_pixel", "max_path_length"],
            "rasterize_triangles": ["num_triangles", "viewport_width", "viewport_height"],
            "fragment_shader_mandelbrot": ["image_width", "image_height", "max_iterations"],
            "vertex_shader_skinning": ["num_vertices", "num_bones"],
            "tessellation_shader": ["num_patches", "tessellation_level"],
            "volume_ray_marching": ["volume_width", "volume_height", "volume_depth", "samples_per_ray"],
            "fluid_simulation_grid_2d": ["grid_width", "grid_height", "num_simulation_steps"],
            "fluid_simulation_grid_3d": ["grid_width", "grid_height", "grid_depth", "num_simulation_steps"],
            "smoke_simulation_particles": ["num_particles", "num_simulation_steps"],
            "mesh_subdivision_loop": ["num_vertices", "num_subdivision_levels"],
            "mesh_simplification_qem": ["initial_vertex_count", "target_vertex_count"],
            "marching_cubes_isosurface_extraction": ["grid_dim_x", "grid_dim_y", "grid_dim_z"],
            "perlin_noise_generation_3d": ["texture_width", "texture_height", "texture_depth", "num_octaves"],
            "fractal_landscape_generation": ["grid_size", "num_recursion_levels"],
            "cloth_simulation_mass_spring": ["grid_width", "grid_height", "num_simulation_steps", "constraint_iterations"],
            "rigid_body_physics_simulation": ["num_objects", "num_simulation_steps", "solver_iterations"],
            "soft_body_physics_simulation": ["num_nodes", "num_simulation_steps", "solver_iterations"],
            "gaussian_blur_filter": ["image_width", "image_height", "kernel_radius"],
            "bloom_effect_processing": ["image_width", "image_height", "blur_passes"]
        }
    ),
    "Operations Research": (
        "Using mathematical and computational methods to make better decisions in complex systems like logistics, scheduling, and resource allocation. Many problems are NP-hard, requiring intensive exact solvers or heuristics.",
        {
            "simplex_method": ["num_variables", "num_constraints"],
            "integer_programming_branch_and_bound": ["num_variables", "num_constraints", "integer_variable_percentage"],
            "cutting_plane_method": ["num_variables", "num_constraints", "max_cutting_planes"],
            "traveling_salesperson_exact_solve": ["num_cities"],
            "vehicle_routing_problem_solver": ["num_customers", "num_vehicles", "capacity_per_vehicle"],
            "job_shop_scheduling_solver": ["num_jobs", "num_machines"],
            "quadratic_assignment_problem_bruteforce": ["num_facilities"],
            "bin_packing_first_fit_decreasing": ["num_items", "bin_capacity"],
            "set_cover_problem_exact": ["num_universe_elements", "num_subsets"],
            "knapsack_01_dynamic_programming": ["num_items", "capacity"],
            "max_flow_edmonds_karp": ["num_vertices", "num_edges"],
            "min_cost_max_flow": ["num_nodes", "num_arcs"],
            "assignment_problem_hungarian_method": ["num_agents"],
            "inventory_management_dynamic_programming": ["num_time_periods", "max_inventory_level"],
            "resource_allocation_dynamic_programming": ["num_projects", "total_budget"],
            "simulated_annealing_for_tsp": ["num_cities", "num_iterations", "initial_temperature"],
            "tabu_search_for_vrp": ["num_customers", "num_vehicles", "num_iterations", "tabu_list_size"],
            "ant_colony_optimization_for_tsp": ["num_ants", "num_cities", "num_iterations", "pheromone_evaporation_rate"],
            "genetic_algorithm_for_scheduling": ["population_size", "num_generations", "num_jobs", "num_machines"],
            "markov_decision_process_value_iteration": ["num_states", "num_actions", "horizon"],
            "queuing_theory_simulation": ["num_servers", "arrival_rate", "service_rate", "simulation_duration"]
        }
    ),
    "Graph Algorithms": (
        "A fundamental area of computer science focused on algorithms that operate on graph data structures, representing networks and relationships. This includes shortest path, spanning tree, flow, and connectivity problems.",
        {
            "dijkstra_shortest_path": ["num_vertices", "num_edges", "start_vertex"],
            "bellman_ford_shortest_path": ["num_vertices", "num_edges", "start_vertex"],
            "floyd_warshall_all_pairs_shortest_path": ["num_vertices"],
            "a_star_search": ["num_vertices", "num_edges", "start_vertex", "end_vertex"],
            "johnson_all_pairs_shortest_path": ["num_vertices", "num_edges"],
            "kruskal_mst": ["num_vertices", "num_edges"],
            "prim_mst": ["num_vertices", "num_edges"],
            "breadth_first_search": ["num_vertices", "num_edges", "start_vertex"],
            "depth_first_search": ["num_vertices", "num_edges", "start_vertex"],
            "find_connected_components": ["num_vertices", "num_edges"],
            "tarjan_scc": ["num_vertices", "num_edges"],
            "kosaraju_scc": ["num_vertices", "num_edges"],
            "find_articulation_points": ["num_vertices", "num_edges"],
            "find_bridges": ["num_vertices", "num_edges"],
            "edmonds_karp_max_flow": ["num_vertices", "num_edges", "source_vertex", "sink_vertex"],
            "dinic_max_flow": ["num_vertices", "num_edges", "source_vertex", "sink_vertex"],
            "push_relabel_max_flow": ["num_vertices", "num_edges", "source_vertex", "sink_vertex"],
            "hopcroft_karp_bipartite_matching": ["num_vertices_set_a", "num_vertices_set_b", "num_edges"],
            "blossom_algorithm_general_matching": ["num_vertices", "num_edges"],
            "detect_cycle_directed_graph": ["num_vertices", "num_edges"],
            "detect_cycle_undirected_graph": ["num_vertices", "num_edges"],
            "find_eulerian_circuit": ["num_vertices", "num_edges"],
            "topological_sort_kahn": ["num_vertices", "num_edges"],
            "topological_sort_dfs": ["num_vertices", "num_edges"],
            "degree_centrality_calc": ["num_vertices", "num_edges"],
            "closeness_centrality_calc": ["num_vertices", "num_edges"],
            "betweenness_centrality_calc": ["num_vertices", "num_edges"],
            "bron_kerbosch_clique_enum": ["num_vertices", "graph_density"],
            "greedy_graph_coloring": ["num_vertices", "num_edges"]
        }
    ),
    "String Processing and Text Algorithms": (
        "Algorithms for searching, matching, and transforming sequences of characters. They are essential for text editing, data retrieval, bioinformatics, and data compression, and become intensive with large texts.",
        {
            "naive_string_search": ["text_length", "pattern_length"],
            "knuth_morris_pratt_search": ["text_length", "pattern_length"],
            "boyer_moore_search": ["text_length", "pattern_length", "alphabet_size"],
            "rabin_karp_search": ["text_length", "pattern_length"],
            "aho_corasick_multi_pattern_search": ["text_length", "num_patterns", "average_pattern_length"],
            "regex_matching_backtracking": ["text_length", "regex_complexity_score"],
            "levenshtein_distance": ["string1_length", "string2_length"],
            "longest_common_subsequence": ["string1_length", "string2_length"],
            "longest_common_substring": ["string1_length", "string2_length"],
            "diff_utility_myers": ["file1_lines", "file2_lines"],
            "build_suffix_array": ["text_length"],
            "build_suffix_tree_ukkonen": ["text_length"],
            "build_suffix_automaton": ["text_length"],
            "build_trie_from_wordlist": ["num_words", "average_word_length"],
            "lempel_ziv_77_compress": ["input_data_size_kb", "sliding_window_size"],
            "burrows_wheeler_transform": ["block_size_kb"],
            "huffman_coding_build_tree": ["input_data_size_kb", "alphabet_size"],
            "run_length_encoding": ["input_data_size_kb"],
            "manacher_find_all_palindromes": ["text_length"],
            "z_algorithm_pattern_search": ["text_length", "pattern_length"],
            "sort_large_string_array_radix": ["num_strings", "max_string_length"],
            "rope_data_structure_operations": ["initial_string_length", "num_operations"]
        }
    ),
    "Computational Geometry": (
        "Algorithms that solve problems stated in terms of geometry, such as finding convex hulls, intersections, and proximity relationships. These are crucial for CAD, graphics, and robotics.",
        {
            "graham_scan_convex_hull_2d": ["num_points"],
            "monotone_chain_convex_hull_2d": ["num_points"],
            "jarvis_march_convex_hull_2d": ["num_points", "num_hull_vertices"],
            "quickhull_3d": ["num_points"],
            "closest_pair_of_points_dc": ["num_points", "dimensions"],
            "bentley_ottmann_line_intersections": ["num_line_segments"],
            "find_all_intersecting_rectangles": ["num_rectangles"],
            "delaunay_triangulation_bowyer_watson": ["num_points"],
            "voronoi_diagram_fortunes_algorithm": ["num_sites"],
            "polygon_triangulation_ear_clipping": ["num_polygon_vertices"],
            "build_kd_tree": ["num_points", "dimensions"],
            "kd_tree_range_search": ["num_total_points", "num_query_points", "query_radius"],
            "point_in_polygon_test": ["num_polygon_vertices", "num_test_points"],
            "build_r_tree": ["num_rectangles"],
            "rotating_calipers_find_diameter": ["num_convex_hull_points"],
            "polygon_area_shoelace": ["num_polygon_vertices"],
            "largest_empty_circle_in_points": ["num_points"],
            "visibility_graph_construction": ["num_obstacles", "total_vertices"],
            "shortest_path_in_polygon": ["num_polygon_vertices"],
            "polygon_clipping_sutherland_hodgman": ["num_subject_vertices", "num_clip_vertices"],
            "minkowski_sum_convex_polygons": ["num_vertices_A", "num_vertices_B"]
        }
    ),
    "Symbolic Computation (Computer Algebra)": (
        "The manipulation of mathematical expressions and equations in symbolic form, as opposed to numerical approximation. Complexity arises from 'expression swell' where terms grow exponentially.",
        {
            "polynomial_expand": ["num_variables", "initial_terms", "expansion_power"],
            "polynomial_factorization": ["num_variables", "polynomial_degree", "max_coefficient_bits"],
            "polynomial_gcd_multivariate": ["num_variables", "polynomial_degree1", "polynomial_degree2"],
            "polynomial_division_multivariate": ["num_variables", "dividend_degree", "divisor_degree"],
            "resultant_of_polynomials": ["num_variables", "polynomial_degree1", "polynomial_degree2"],
            "groebner_basis_calculation": ["num_polynomials", "num_variables", "max_degree"],
            "simplify_rational_expression": ["num_variables", "numerator_degree", "denominator_degree"],
            "solve_linear_system_symbolic": ["num_equations", "num_variables"],
            "solve_polynomial_system": ["num_equations", "num_variables", "max_degree"],
            "symbolic_differentiation": ["num_variables", "expression_tree_depth", "differentiation_order"],
            "symbolic_integration": ["num_variables", "expression_tree_depth"],
            "taylor_series_expansion": ["num_variables", "expression_tree_depth", "series_order"],
            "limit_computation": ["num_variables", "expression_tree_depth"],
            "matrix_symbolic_determinant": ["matrix_dim"],
            "matrix_symbolic_inverse": ["matrix_dim"],
            "matrix_symbolic_multiplication": ["matrix_dim1_rows", "matrix_dim1_cols", "matrix_dim2_cols"],
            "matrix_symbolic_char_poly": ["matrix_dim"]
        }
    ),
    "Data Compression": (
        "Algorithms designed to reduce the size of data for efficient storage or transmission. This theme includes entropy, dictionary, and transform-based methods, testing both speed and compression ratio.",
        {
            "huffman_compress": ["input_size_mb", "alphabet_size"],
            "huffman_decompress": ["input_size_mb"],
            "arithmetic_coding_compress": ["input_size_mb", "model_precision_bits"],
            "arithmetic_coding_decompress": ["input_size_mb"],
            "lz77_compress": ["input_size_mb", "sliding_window_size", "lookahead_buffer_size"],
            "lz77_decompress": ["input_size_mb"],
            "lzss_compress": ["input_size_mb", "sliding_window_size"],
            "lzw_compress": ["input_size_mb", "max_dictionary_size"],
            "lzw_decompress": ["input_size_mb", "max_dictionary_size"],
            "burrows_wheeler_transform": ["block_size_kb"],
            "inverse_burrows_wheeler_transform": ["block_size_kb"],
            "move_to_front_transform": ["input_size_mb", "alphabet_size"],
            "inverse_move_to_front_transform": ["input_size_mb", "alphabet_size"],
            "run_length_encoding_compress": ["input_size_mb"],
            "run_length_encoding_decompress": ["input_size_mb"],
            "delta_encoding_compress": ["input_size_mb", "word_size_bytes"],
            "delta_encoding_decompress": ["input_size_mb", "word_size_bytes"],
            "bzip2_like_compress_pipeline": ["input_size_mb", "bwt_block_size_kb"],
            "deflate_like_compress_pipeline": ["input_size_mb", "lz77_window_size"]
        }
    ),
    "Parsing and Formal Language Recognition": (
        "Algorithms for analyzing a string of symbols to determine its grammatical structure with respect to a given formal grammar. This is the foundation of compilers and interpreters.",
        {
            "lexical_analyzer_run": ["input_size_bytes", "num_lexical_rules"],
            "recursive_descent_parser": ["input_token_count", "grammar_rule_count", "max_nesting_depth"],
            "ll_k_parser_from_table": ["input_token_count", "k_lookahead", "num_table_entries"],
            "lr_0_parser_from_table": ["input_token_count", "num_parser_states"],
            "slr_parser_from_table": ["input_token_count", "num_parser_states"],
            "lalr_parser_from_table": ["input_token_count", "num_parser_states"],
            "earley_parser": ["input_token_count", "grammar_rule_count"],
            "cyk_parser": ["input_token_count", "grammar_rule_count_in_cnf"],
            "glr_parser": ["input_token_count", "grammar_rule_count"],
            "regex_nfa_simulation": ["input_string_length", "regex_pattern_complexity"],
            "regex_dfa_execution": ["input_string_length", "num_dfa_states"],
            "generate_lr_parsing_table": ["num_grammar_rules", "num_terminals", "num_non_terminals"],
            "convert_nfa_to_dfa": ["num_nfa_states", "alphabet_size"],
            "peg_parser": ["input_token_count", "num_grammar_rules"],
            "context_sensitive_grammar_parser_lba": ["input_string_length", "num_grammar_rules"]
        }
    ),
    "Sorting": (
        "A fundamental class of algorithms for arranging elements of a list or array in a specific order. This theme covers a wide range of algorithms with varying performance characteristics based on data size and distribution.",
        {
            "quicksort": ["num_elements", "initial_data_distribution"],
            "mergesort": ["num_elements"],
            "heapsort": ["num_elements"],
            "introsort": ["num_elements", "max_recursion_depth"],
            "timsort": ["num_elements", "initial_data_distribution"],
            "bubble_sort": ["num_elements"],
            "insertion_sort": ["num_elements", "initial_data_distribution"],
            "selection_sort": ["num_elements"],
            "shellsort": ["num_elements", "gap_sequence_type"],
            "counting_sort": ["num_elements", "max_value_in_data"],
            "radix_sort_lsd": ["num_elements", "max_value_in_data"],
            "bucket_sort": ["num_elements", "num_buckets"],
            "quicksort_with_insertion_sort_cutoff": ["num_elements", "cutoff_size"],
            "external_merge_sort": ["total_elements", "ram_capacity_in_elements"],
            "pancake_sort": ["num_elements"],
            "binary_tree_sort": ["num_elements", "initial_data_distribution"]
        }
    ),
    "Computational Chemistry": (
        "Using computer simulations to solve chemical problems, often involving complex quantum mechanical (ab initio, DFT) or classical (molecular dynamics) calculations with high polynomial scaling.",
        {
            "hartree_fock_scf": ["num_atoms", "num_basis_functions_per_atom"],
            "density_functional_theory_scf": ["num_atoms", "num_basis_functions_per_atom", "integration_grid_quality"],
            "moller_plesset_perturbation_theory_mp2": ["num_occupied_orbitals", "num_virtual_orbitals"],
            "coupled_cluster_ccsd": ["num_occupied_orbitals", "num_virtual_orbitals"],
            "quantum_monte_carlo_vqe": ["num_qubits", "circuit_depth", "num_shots"],
            "molecular_dynamics_nvt": ["num_atoms", "num_time_steps", "non_bonded_cutoff_radius"],
            "molecular_dynamics_npt": ["num_atoms", "num_time_steps", "non_bonded_cutoff_radius"],
            "energy_minimization_steepest_descent": ["num_atoms", "max_iterations"],
            "conformational_search_monte_carlo": ["num_atoms", "num_rotatable_bonds", "num_mc_steps"],
            "free_energy_perturbation": ["num_atoms", "num_lambda_windows", "time_steps_per_window"],
            "semi_empirical_mopac_run": ["num_atoms"],
            "calculate_radial_distribution_function": ["num_frames", "num_particles", "num_bins"],
            "calculate_rmsd_trajectory": ["num_frames", "num_atoms_to_align"],
            "principal_component_analysis_of_trajectory": ["num_frames", "num_atoms"],
            "build_wham_potential_of_mean_force": ["num_umbrella_windows", "data_points_per_window"],
            "calculate_vibrational_frequencies": ["num_atoms", "num_basis_functions"],
            "simulate_nmr_chemical_shifts": ["num_atoms", "num_basis_functions"]
        }
    ),
    "Geospatial Information Systems (GIS) Analysis": (
        "Algorithms for capturing, storing, analyzing, and managing geographically referenced data. This theme covers both raster (grid) and vector (point/line/polygon) based operations.",
        {
            "raster_viewshed_analysis": ["dem_width", "dem_height", "num_observer_points"],
            "raster_cost_distance": ["cost_surface_width", "cost_surface_height", "num_source_points"],
            "raster_hydrology_flow_accumulation": ["dem_width", "dem_height"],
            "focal_statistics_mean_filter": ["grid_width", "grid_height", "kernel_size"],
            "raster_overlay_weighted_sum": ["grid_width", "grid_height", "num_layers"],
            "zonal_statistics": ["zone_raster_width", "zone_raster_height", "value_raster_width", "value_raster_height", "num_zones"],
            "vector_overlay_intersect_polygons": ["num_polygons_A", "avg_vertices_A", "num_polygons_B", "avg_vertices_B"],
            "vector_overlay_union_polygons": ["num_polygons_A", "avg_vertices_A", "num_polygons_B", "avg_vertices_B"],
            "buffer_generation": ["num_features", "avg_vertices_per_feature", "buffer_resolution_segments"],
            "spatial_join_points_in_polygons": ["num_points", "num_polygons", "avg_vertices_per_polygon"],
            "dissolve_polygons_by_attribute": ["num_input_polygons", "avg_vertices_per_polygon"],
            "network_analysis_service_area": ["num_nodes", "num_edges", "num_facilities", "break_time_or_distance"],
            "point_cloud_ground_classification": ["num_points", "grid_resolution"],
            "point_cloud_to_dem_interpolation": ["num_points", "output_grid_width", "output_grid_height", "interpolation_method"],
            "rasterize_polygons": ["num_polygons", "avg_vertices_per_polygon", "output_grid_width", "output_grid_height"],
            "vectorize_raster": ["grid_width", "grid_height"],
            "reproject_vector_layer": ["num_features", "avg_vertices_per_feature"],
            "build_spatial_index_r_tree": ["num_features"],
            "build_spatial_index_quadtree": ["num_points", "max_tree_depth"],
            "inverse_distance_weighting_interpolation": ["num_known_points", "output_grid_width", "output_grid_height", "power_parameter"],
            "kriging_interpolation": ["num_known_points", "output_grid_width", "output_grid_height", "nugget", "sill", "range"]
        }
    ),
    "Digital Signal Processing (DSP)": (
        "The manipulation of signals (like audio or sensor data) represented as sequences of numbers. This theme covers common operations like filtering, transforms (FFT), convolution, and modulation on large data streams.",
        {
            "fast_fourier_transform_radix2": ["num_samples", "num_transforms_to_run"],
            "inverse_fast_fourier_transform": ["num_samples", "num_transforms_to_run"],
            "discrete_cosine_transform": ["num_samples", "num_transforms_to_run"],
            "short_time_fourier_transform": ["signal_length", "window_size", "hop_size"],
            "wavelet_transform_discrete": ["signal_length", "decomposition_levels"],
            "fir_filter_direct_form": ["signal_length", "num_filter_taps"],
            "iir_filter_direct_form": ["signal_length", "num_feedback_taps", "num_feedforward_taps"],
            "fir_filter_fft_overlap_add": ["signal_length", "num_filter_taps", "fft_block_size"],
            "median_filter": ["signal_length", "window_size"],
            "convolution_direct": ["input_signal_length", "kernel_length"],
            "auto_correlation_direct": ["signal_length", "max_lag"],
            "cross_correlation_fft": ["signal_a_length", "signal_b_length"],
            "generate_sinewave_table": ["num_samples", "num_harmonics"],
            "qam_modulation": ["num_symbols", "constellation_size"],
            "qam_demodulation": ["num_samples", "constellation_size"],
            "generate_dtmf_tones": ["num_samples", "tone_duration_ms"],
            "resample_polyphase_fir": ["signal_length", "interpolation_factor", "decimation_factor", "num_taps_per_phase"],
            "upsample_with_interpolation": ["signal_length", "interpolation_factor", "filter_order"],
            "downsample_with_decimation": ["signal_length", "decimation_factor", "filter_order"],
            "lms_adaptive_filter_run": ["signal_length", "num_filter_taps"],
            "pitch_detection_autocorrelation": ["audio_buffer_size_ms", "sample_rate_hz"],
            "dynamic_time_warping": ["sequence1_length", "sequence2_length", "window_size"]
        }
    ),
    "Data Mining and Association Rule Learning": (
        "Extracting patterns, knowledge, and insights from large datasets. This includes finding frequent itemsets and associations (market basket analysis), as well as clustering and classification on a large scale.",
        {
            "apriori_frequent_itemsets": ["num_transactions", "num_unique_items", "min_support_threshold"],
            "fp_growth_frequent_itemsets": ["num_transactions", "num_unique_items", "min_support_threshold"],
            "eclat_frequent_itemsets": ["num_transactions", "num_unique_items", "min_support_threshold"],
            "generate_association_rules_from_itemsets": ["num_frequent_itemsets", "min_confidence_threshold"],
            "gsp_sequential_patterns": ["num_sequences", "avg_sequence_length", "num_unique_items", "min_support_threshold"],
            "prefix_span_sequential_patterns": ["num_sequences", "avg_sequence_length", "num_unique_items", "min_support_threshold"],
            "k_means_on_disk": ["num_points", "num_features", "num_clusters", "max_iterations"],
            "dbscan_with_indexing": ["num_points", "num_features", "epsilon", "min_samples"],
            "birch_clustering": ["num_points", "num_features", "branching_factor", "threshold"],
            "clarans_clustering": ["num_points", "num_features", "num_clusters", "num_local_searches", "max_neighbors"],
            "id3_decision_tree_build": ["num_samples", "num_features", "num_classes"],
            "c45_decision_tree_build": ["num_samples", "num_features", "num_classes"],
            "cart_decision_tree_build": ["num_samples", "num_features"],
            "naive_bayes_from_disk": ["num_samples", "num_features", "num_classes"],
            "page_rank_calculation": ["num_webpages", "num_links", "num_iterations"],
            "hits_algorithm_calculation": ["num_nodes", "num_edges", "num_iterations"]
        }
    ),
    "Real-time Stream Processing": (
        "Processing data continuously as it is generated, focusing on low-latency analysis of high-velocity data streams. Benchmarks test windowed aggregations, joins, and stateful operations under high throughput.",
        {
            "tumbling_window_aggregation": ["events_per_second", "window_duration_ms", "aggregation_complexity"],
            "sliding_window_aggregation": ["events_per_second", "window_duration_ms", "slide_duration_ms"],
            "session_window_aggregation": ["events_per_second", "session_gap_ms"],
            "stream_to_stream_join": ["events_per_second_stream1", "events_per_second_stream2", "window_duration_ms"],
            "stream_to_table_join": ["events_per_second", "table_size_records"],
            "stateful_map_with_keyed_state": ["events_per_second", "num_unique_keys", "state_size_per_key_bytes"],
            "complex_event_processing_pattern_matching": ["events_per_second", "pattern_sequence_length", "time_window_ms"],
            "stream_deduplication": ["events_per_second", "time_window_for_uniqueness_ms", "num_unique_keys"],
            "event_time_reordering_and_watermarking": ["events_per_second", "max_out_of_orderness_ms"],
            "stream_filtering_lambda": ["events_per_second", "filter_selectivity_percentage"],
            "stream_flatmap_operation": ["events_per_second", "avg_outputs_per_input"],
            "hyperloglog_count_distinct": ["events_per_second", "num_unique_keys_to_track"],
            "bloom_filter_check_stream": ["events_per_second", "num_items_in_filter", "hash_functions"],
            "count_min_sketch_frequency_count": ["events_per_second", "sketch_width", "sketch_depth"],
            "heavy_hitters_detection": ["events_per_second", "top_k_elements_to_find"]
        }
    ),
    "Boolean Satisfiability (SAT) and Constraint Solving": (
        "Algorithms for determining if a solution exists for a given set of logical or numerical constraints. These are NP-complete problems at the heart of AI, formal verification, and logistics.",
        {
            "dpll_solver": ["num_variables", "num_clauses", "clause_to_variable_ratio"],
            "cdcl_solver_basic": ["num_variables", "num_clauses", "clause_to_variable_ratio"],
            "walksat_local_search_solver": ["num_variables", "num_clauses", "max_flips", "max_tries"],
            "two_sat_solver": ["num_variables", "num_clauses"],
            "horn_sat_solver": ["num_variables", "num_clauses"],
            "max_sat_solver_branch_and_bound": ["num_variables", "num_clauses", "num_hard_clauses"],
            "csp_backtracking_search": ["num_variables", "domain_size_per_variable", "constraint_tightness_percentage"],
            "csp_forward_checking": ["num_variables", "domain_size_per_variable", "constraint_tightness_percentage"],
            "csp_arc_consistency_ac3": ["num_variables", "domain_size_per_variable", "num_constraints"],
            "csp_min_conflicts_local_search": ["num_variables", "domain_size_per_variable", "max_steps"],
            "smt_solver_difference_logic": ["num_variables", "num_constraints"],
            "smt_solver_uninterpreted_functions": ["num_variables", "num_function_applications"],
            "build_binary_decision_diagram_from_cnf": ["num_variables", "num_clauses", "variable_ordering_heuristic"],
            "resolution_theorem_proving": ["num_initial_clauses"]
        }
    ),
    "Automated Theorem Proving and Formal Verification": (
        "Using computer programs to prove mathematical theorems or formally verify the correctness of hardware or software systems. This involves navigating enormous state spaces and complex logical formulas.",
        {
            "tableau_prover_first_order": ["formula_depth", "num_variables", "num_quantifiers"],
            "resolution_prover_fol": ["num_initial_clauses", "term_depth"],
            "unification_engine_run": ["num_terms", "max_term_depth", "num_variables"],
            "explicit_state_model_checker_ltl": ["num_states", "num_transitions_per_state", "ltl_formula_complexity"],
            "symbolic_model_checker_ctl_bdd": ["num_state_variables", "ctl_formula_complexity"],
            "bounded_model_checker_sat": ["num_state_variables", "transition_logic_complexity", "unrolling_bound_k"],
            "explicit_state_buchke_automaton_check": ["num_states_model", "num_states_automaton"],
            "combinatorial_equivalence_check_aig": ["num_gates_circuit_a", "num_gates_circuit_b"],
            "bisimulation_equivalence_check": ["num_states_a", "num_transitions_a", "num_states_b", "num_transitions_b"],
            "symbolic_execution_path_explosion": ["program_branching_factor", "max_path_depth"],
            "weakest_precondition_calculation": ["num_statements", "loop_nesting_depth", "assertion_complexity"],
            "abstract_interpretation_run": ["num_program_variables", "abstract_domain_size", "num_loops"],
            "knuth_bendix_completion_algorithm": ["num_initial_rules", "max_term_length"],
            "check_confluence_rewriting_system": ["num_rules", "max_term_length"],
            "type_inference_hindley_milner": ["expression_tree_size", "num_let_bindings"],
            "apply_automated_proof_search_tactic": ["num_initial_lemmas", "goal_complexity", "search_depth"]
        }
    ),
    "Financial Modeling and Quantitative Analysis": (
        "Using computational techniques to model financial markets, price derivatives, and manage risk. This field heavily relies on Monte Carlo simulations, time-series analysis, and portfolio optimization.",
        {
            "monte_carlo_european_option_price": ["num_simulations", "num_time_steps", "num_assets"],
            "monte_carlo_american_option_price_lsm": ["num_simulations", "num_time_steps", "polynomial_degree"],
            "binomial_tree_option_price": ["num_tree_steps"],
            "trinomial_tree_option_price": ["num_tree_steps"],
            "black_scholes_pde_solver_finite_diff": ["grid_size_price", "grid_size_time"],
            "mean_variance_portfolio_optimization": ["num_assets", "num_historical_points"],
            "covariance_matrix_calculation": ["num_assets", "num_historical_points"],
            "monte_carlo_value_at_risk": ["num_assets", "num_simulations", "time_horizon_days"],
            "historical_value_at_risk": ["num_assets", "num_historical_days"],
            "conditional_value_at_risk_optimization": ["num_assets", "num_scenarios"],
            "efficient_frontier_calculation": ["num_assets", "num_frontier_points"],
            "garch_model_fitting": ["time_series_length", "p_order", "q_order"],
            "arma_model_fitting": ["time_series_length", "p_order", "q_order"],
            "kalman_filter_state_estimation": ["time_series_length", "num_state_variables"],
            "backtest_trading_strategy": ["num_historical_bars", "num_assets", "strategy_complexity_score"],
            "market_order_book_simulation": ["num_market_events", "order_book_depth"],
            "agent_based_market_simulation": ["num_agents", "num_simulation_steps", "num_assets"],
            "credit_portfolio_loss_simulation_mc": ["num_obligors", "num_simulations", "correlation_factor"],
            "hull_white_model_calibration": ["num_market_instruments", "time_series_length"],
            "bond_yield_curve_construction": ["num_bonds", "spline_complexity"]
        }
    ),
    "Robotics, Pathfinding, and Motion Planning": (
        "Algorithms that enable robots to perceive their environment, plan movements, and execute tasks. This includes pathfinding on grids, motion planning in continuous space, and solving manipulator kinematics.",
        {
            "a_star_pathfinding_2d_grid": ["grid_width", "grid_height", "obstacle_percentage"],
            "jump_point_search_pathfinding": ["grid_width", "grid_height", "obstacle_percentage"],
            "d_star_lite_replanning": ["grid_width", "grid_height", "num_cost_updates"],
            "theta_star_any_angle_pathfinding": ["grid_width", "grid_height", "obstacle_percentage"],
            "rrt_motion_planning": ["config_space_dims", "num_obstacles", "num_iterations"],
            "rrt_star_motion_planning": ["config_space_dims", "num_obstacles", "num_iterations", "rewire_radius"],
            "prm_construction_phase": ["config_space_dims", "num_obstacles", "num_nodes_to_sample"],
            "inverse_kinematics_solver_jacobian": ["num_links", "max_iterations"],
            "forward_dynamics_simulation_abm": ["num_links", "num_simulation_steps"],
            "inverse_dynamics_simulation_rnea": ["num_links", "num_trajectory_points"],
            "collision_detection_broadphase": ["num_objects_a", "num_objects_b"],
            "collision_detection_narrowphase_gjk": ["num_vertices_a", "num_vertices_b"],
            "particle_filter_localization_mcl": ["num_particles", "map_width", "map_height", "num_updates"],
            "iterative_closest_point_registration": ["num_points_cloud_a", "num_points_cloud_b", "max_iterations"],
            "occupancy_grid_mapping_from_scans": ["map_width", "map_height", "num_sensor_readings", "readings_per_scan"],
            "pose_graph_optimization_backend": ["num_poses", "num_loop_closures"],
            "lqr_controller_calculation": ["num_states", "num_inputs"],
            "potential_field_navigation": ["grid_width", "grid_height", "num_obstacles"]
        }
    ),
    "Game AI and Tree Search Algorithms": (
        "Specialized algorithms for creating intelligent behavior in games, often involving searching vast decision trees. This theme covers classic search (Minimax), modern methods (MCTS), and behavioral simulations.",
        {
            "minimax_search": ["search_depth", "branching_factor"],
            "alpha_beta_pruning": ["search_depth", "branching_factor"],
            "negamax_search": ["search_depth", "branching_factor"],
            "monte_carlo_tree_search_uct": ["num_simulations", "max_playout_depth", "branching_factor"],
            "iterative_deepening_search": ["max_depth", "branching_factor"],
            "beam_search": ["search_depth", "branching_factor", "beam_width"],
            "real_time_a_star_lrta": ["lookahead_depth", "num_moves_to_simulate", "map_size"],
            "counterfactual_regret_minimization_cfr": ["num_game_tree_nodes", "num_iterations"],
            "navmesh_funnel_algorithm": ["num_polygons_in_path"],
            "jps_plus_pathfinding": ["grid_width", "grid_height", "obstacle_percentage"],
            "boids_flocking_simulation": ["num_agents", "num_simulation_steps"],
            "squad_behavior_tree_execution": ["num_agents", "tree_depth", "ticks_to_simulate"],
            "chess_engine_perft": ["depth"],
            "go_board_influence_calculation": ["board_size", "num_stones"],
            "checkers_endgame_database_probe": ["num_pieces_on_board", "num_probes"]
        }
    ),
    "Digital Logic and Circuit Simulation": (
        "Simulating the behavior of digital and analog electronic circuits. This ranges from event-driven simulation of logic gates to static timing analysis and computationally intensive SPICE-like analog simulations.",
        {
            "event_driven_logic_simulation": ["num_gates", "num_flip_flops", "num_input_vectors", "simulation_duration_ns"],
            "cycle_based_logic_simulation": ["num_gates", "num_flip_flops", "num_clock_cycles"],
            "levelized_compiled_code_simulation": ["num_gates", "num_input_vectors"],
            "logic_synthesis_optimization": ["num_initial_gates", "optimization_effort_level"],
            "static_timing_analysis_sta": ["num_gates", "num_paths_to_analyze"],
            "power_analysis_simulation": ["num_gates", "num_flip_flops", "num_clock_cycles", "toggle_rate_percentage"],
            "combinational_equivalence_checking_sat": ["num_gates_circuit_a", "num_gates_circuit_b"],
            "bounded_model_checking": ["num_flip_flops", "num_gates", "property_complexity", "max_depth_k"],
            "fault_simulation_parallel": ["num_gates", "num_faults", "num_test_vectors"],
            "fault_simulation_deductive": ["num_gates", "num_test_vectors"],
            "automatic_test_pattern_generation_podem": ["num_gates", "num_target_faults"],
            "transient_analysis_ngspice_like": ["num_nodes", "num_active_elements", "simulation_time_end", "time_step"],
            "ac_analysis_ngspice_like": ["num_nodes", "num_active_elements", "num_frequency_points"],
            "dc_operating_point_analysis": ["num_nodes", "num_nonlinear_elements", "max_iterations"],
            "build_binary_decision_diagram": ["num_variables", "boolean_function_complexity"],
            "build_timing_graph": ["num_gates", "num_nets"]
        }
    ),
    "Computational Topology": (
        "Using algorithms to study intrinsic properties of shapes and spaces, particularly in Topological Data Analysis (TDA). This involves constructing high-dimensional objects (simplicial complexes) and calculating topological invariants like Betti numbers.",
        {
            "build_vietoris_rips_complex": ["num_points", "ambient_dimension", "epsilon_radius", "max_simplicial_dimension"],
            "build_cech_complex": ["num_points", "ambient_dimension", "epsilon_radius", "max_simplicial_dimension"],
            "build_alpha_complex": ["num_points", "max_simplicial_dimension"],
            "build_witness_complex": ["num_landmark_points", "num_witness_points", "max_simplicial_dimension"],
            "compute_simplicial_homology": ["num_simplices", "max_simplicial_dimension"],
            "smith_normal_form_boundary_matrix": ["num_rows", "num_cols"],
            "betti_numbers_from_homology_groups": ["num_simplices", "max_simplicial_dimension"],
            "compute_persistent_homology_filtration": ["num_simplices_in_filtration", "max_dimension"],
            "construct_persistence_diagram": ["num_simplices_in_filtration", "max_dimension"],
            "calculate_bottleneck_distance": ["num_points_diagram_a", "num_points_diagram_b"],
            "calculate_wasserstein_distance": ["num_points_diagram_a", "num_points_diagram_b"],
            "zigzag_persistence_calculation": ["filtration_length", "max_dimension"],
            "manifold_reconstruction_local_pca": ["num_points", "num_neighbors", "target_dimension"],
            "isomap_embedding": ["num_points", "num_neighbors", "target_dimension"],
            "locally_linear_embedding_lle": ["num_points", "num_neighbors", "target_dimension"],
            "discrete_morse_theory_simplification": ["num_simplices", "max_dimension"],
            "construct_morse_smale_complex": ["num_simplices", "max_dimension"],
            "calculate_jones_polynomial": ["num_crossings"]
        }
    ),
    "Audio Synthesis and Analysis": (
        "Algorithms for creating sound (synthesis) and extracting meaningful information from audio signals (analysis). This theme covers everything from generating sounds with oscillators to complex spectral analysis like MFCCs.",
        {
            "additive_synthesis_run": ["duration_seconds", "sample_rate_hz", "num_harmonics"],
            "subtractive_synthesis_run": ["duration_seconds", "sample_rate_hz", "filter_order", "num_modulation_steps"],
            "fm_synthesis_run": ["duration_seconds", "sample_rate_hz", "num_operators"],
            "wavetable_synthesis_run": ["duration_seconds", "sample_rate_hz", "wavetable_size", "num_interpolations"],
            "physical_modeling_karplus_strong": ["duration_seconds", "sample_rate_hz", "delay_line_length"],
            "granular_synthesis_run": ["output_duration_seconds", "input_audio_length", "num_grains_per_second", "grain_size_ms"],
            "pitch_detection_yin": ["audio_length_seconds", "sample_rate_hz", "buffer_size"],
            "onset_detection_spectral_flux": ["audio_length_seconds", "sample_rate_hz", "fft_size", "hop_size"],
            "mfcc_extraction": ["audio_length_seconds", "sample_rate_hz", "num_mfccs", "fft_size", "hop_size"],
            "chromagram_extraction": ["audio_length_seconds", "sample_rate_hz", "fft_size", "hop_size"],
            "beat_tracking_dynamic_programming": ["audio_length_seconds", "sample_rate_hz", "tempo_search_range"],
            "constant_q_transform": ["audio_length_seconds", "sample_rate_hz", "bins_per_octave"],
            "spectral_centroid_analysis": ["audio_length_seconds", "sample_rate_hz", "fft_size", "hop_size"],
            "convolution_reverb_apply": ["input_audio_length", "impulse_response_length"],
            "phase_vocoder_time_stretch": ["audio_length_seconds", "stretch_factor", "fft_size", "hop_size"],
            "phase_vocoder_pitch_shift": ["audio_length_seconds", "pitch_shift_factor", "fft_size", "hop_size"],
            "dynamic_range_compression": ["audio_length_seconds", "sample_rate_hz"],
            "harmonic_percussive_source_separation": ["audio_length_seconds", "sample_rate_hz", "margin", "kernel_size"],
            "independent_component_analysis_fastica": ["audio_length_seconds", "num_channels", "num_iterations"]
        }
    )
}