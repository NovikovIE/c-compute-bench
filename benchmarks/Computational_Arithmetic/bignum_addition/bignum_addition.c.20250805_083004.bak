#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <stdint.h>
#include <string.h>

// --- Mersenne Twister (Do Not Modify) ---
#define MT_N 624
#define MT_M 397
#define MT_MATRIX_A 0x9908b0dfUL
#define MT_UPPER_MASK 0x80000000UL
#define MT_LOWER_MASK 0x7fffffffUL

static uint32_t mt[MT_N];
static int mt_index = MT_N + 1;

void mt_seed(uint32_t seed) {
    mt[0] = seed;
    for (mt_index = 1; mt_index < MT_N; mt_index++) {
        mt[mt_index] = (1812433253UL * (mt[mt_index - 1] ^ (mt[mt_index - 1] >> 30)) + mt_index);
    }
}

uint32_t mt_rand(void) {
    uint32_t y;
    static const uint32_t mag01[2] = {0x0UL, MT_MATRIX_A};
    if (mt_index >= MT_N) {
        if (mt_index > MT_N) {
             fprintf(stderr, "FATAL: Mersenne Twister not seeded.\n");
             exit(1);
        }
        for (int i = 0; i < MT_N - MT_M; i++) {
            y = (mt[i] & MT_UPPER_MASK) | (mt[i + 1] & MT_LOWER_MASK);
            mt[i] = mt[i + MT_M] ^ (y >> 1) ^ mag01[y & 0x1UL];
        }
        for (int i = MT_N - MT_M; i < MT_N - 1; i++) {
            y = (mt[i] & MT_UPPER_MASK) | (mt[i + 1] & MT_LOWER_MASK);
            mt[i] = mt[i + (MT_M - MT_N)] ^ (y >> 1) ^ mag01[y & 0x1UL];
        }
        y = (mt[MT_N - 1] & MT_UPPER_MASK) | (mt[0] & MT_LOWER_MASK);
        mt[MT_N - 1] = mt[MT_M - 1] ^ (y >> 1) ^ mag01[y & 0x1UL];
        mt_index = 0;
    }
    y = mt[mt_index++];
    y ^= (y >> 11); y ^= (y << 7) & 0x9d2c5680UL; y ^= (y << 15) & 0xefc60000UL; y ^= (y >> 18);
    return y;
}

// --- Global Benchmark Data ---

// Pointers to the big numbers, stored as arrays of digits (0-9).
// Numbers are stored in reverse order (least significant digit at index 0).
char *number_a = NULL;
char *number_b = NULL;
char *result_sum = NULL;

// Parameters controlling the size of the numbers.
int size_a;
int size_b;
int max_size;
int result_alloc_size;
int effective_result_size;

// Final result to prevent dead code elimination.
long long final_checksum = 0;

// --- Benchmark Functions ---

void setup_benchmark(int argc, char *argv[]) {
    if (argc != 4) {
        fprintf(stderr, "Usage: %s num_digits_a num_digits_b seed\n", argv[0]);
        exit(1);
    }

    size_a = atoi(argv[1]);
    size_b = atoi(argv[2]);
    uint32_t seed = (uint32_t)atoi(argv[3]);

    if (size_a <= 0 || size_b <= 0) {
        fprintf(stderr, "Error: Number of digits must be positive.\n");
        exit(1);
    }

    mt_seed(seed);

    max_size = (size_a > size_b) ? size_a : size_b;
    result_alloc_size = max_size + 1; // Potential for one extra carry digit.

    number_a = (char*)malloc(size_a * sizeof(char));
    number_b = (char*)malloc(size_b * sizeof(char));
    result_sum = (char*)malloc(result_alloc_size * sizeof(char));

    if (!number_a || !number_b || !result_sum) {
        fprintf(stderr, "Error: Memory allocation failed.\n");
        free(number_a);
        free(number_b);
        free(result_sum);
        exit(1);
    }

    for (int i = 0; i < size_a; i++) {
        number_a[i] = mt_rand() % 10;
    }

    for (int i = 0; i < size_b; i++) {
        number_b[i] = mt_rand() % 10;
    }\n
    // It's good practice to initialize the result array.
    memset(result_sum, 0, result_alloc_size * sizeof(char));
}

void run_computation() {
    int carry = 0;
    int i;
    int min_size = (size_a < size_b) ? size_a : size_b;

    // 1. Add the common part where both numbers have digits.
    for (i = 0; i < min_size; i++) {
        int sum = number_a[i] + number_b[i] + carry;
        result_sum[i] = sum % 10;
        carry = sum / 10;
    }

    // 2. Add the remaining part of the longer number, if any.
    char *longer_num = (size_a > size_b) ? number_a : number_b;
    for (; i < max_size; i++) {
        int sum = longer_num[i] + carry;
        result_sum[i] = sum % 10;
        carry = sum / 10;
    }

    // 3. If there's a final carry, store it.
    if (carry > 0) {
        result_sum[i] = carry;
        effective_result_size = i + 1;
    } else {
        effective_result_size = i;
    }

    // 4. Calculate a checksum of the result digits to ensure the computation is not optimized away.
    final_checksum = 0;
    for (int j = 0; j < effective_result_size; j++) {
        final_checksum += result_sum[j];
    }
}

void cleanup() {
    free(number_a);
    free(number_b);
    free(result_sum);
    number_a = NULL;
    number_b = NULL;
    result_sum = NULL;
}

// --- Main Execution ---

int main(int argc, char *argv[]) {
    struct timespec start, end;

    setup_benchmark(argc, argv);

    clock_gettime(CLOCK_MONOTONIC, &start);
    run_computation();
    clock_gettime(CLOCK_MONOTONIC, &end);

    cleanup();

    double time_taken = (end.tv_sec - start.tv_sec) + (end.tv_nsec - start.tv_nsec) / 1e9;

    // Print the final checksum to stdout to prevent dead code elimination.
    printf("%lld\n", final_checksum);

    // Print the time taken to stderr.
    fprintf(stderr, "%.6f", time_taken);

    return 0;
}
