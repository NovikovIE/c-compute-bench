#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <stdint.h>

// --- Mersenne Twister (MT19937) --- Do Not Modify ---
#define MT_N 624
#define MT_M 397
#define MT_MATRIX_A 0x9908b0dfUL
#define MT_UPPER_MASK 0x80000000UL
#define MT_LOWER_MASK 0x7fffffffUL

static uint32_t mt[MT_N];
static int mt_index = MT_N + 1;

void mt_seed(uint32_t seed) {
    mt[0] = seed;
    for (mt_index = 1; mt_index < MT_N; mt_index++) {
        mt[mt_index] = (1812433253UL * (mt[mt_index - 1] ^ (mt[mt_index - 1] >> 30)) + mt_index);
    }
}

uint32_t mt_rand(void) {
    uint32_t y;
    static const uint32_t mag01[2] = {0x0UL, MT_MATRIX_A};
    if (mt_index >= MT_N) {
        if (mt_index > MT_N) {
             fprintf(stderr, "FATAL: Mersenne Twister not seeded.");
             exit(1);
        }
        for (int i = 0; i < MT_N - MT_M; i++) {
            y = (mt[i] & MT_UPPER_MASK) | (mt[i + 1] & MT_LOWER_MASK);
            mt[i] = mt[i + MT_M] ^ (y >> 1) ^ mag01[y & 0x1UL];
        }
        for (int i = MT_N - MT_M; i < MT_N - 1; i++) {
            y = (mt[i] & MT_UPPER_MASK) | (mt[i + 1] & MT_LOWER_MASK);
            mt[i] = mt[i + (MT_M - MT_N)] ^ (y >> 1) ^ mag01[y & 0x1UL];
        }
        y = (mt[MT_N - 1] & MT_UPPER_MASK) | (mt[0] & MT_LOWER_MASK);
        mt[MT_N - 1] = mt[MT_M - 1] ^ (y >> 1) ^ mag01[y & 0x1UL];
        mt_index = 0;
    }
    y = mt[mt_index++];
    y ^= (y >> 11); y ^= (y << 7) & 0x9d2c5680UL; y ^= (y << 15) & 0xefc60000UL; y ^= (y >> 18);
    return y;
}
// --- End Mersenne Twister ---

// --- Marching Cubes Data ---
static const int edgeTable[256] = {
    0x0, 0x109, 0x203, 0x30a, 0x406, 0x50f, 0x605, 0x70c, 0x80c, 0x905, 0xa0f, 0xb06, 0xc0a, 0xd03, 0xe09, 0xf00,
    0x190, 0x99, 0x393, 0x29a, 0x596, 0x49f, 0x795, 0x69c, 0x99c, 0x895, 0xb9f, 0xa96, 0xd9a, 0xc93, 0xf99, 0xe90,
    0x230, 0x339, 0x33, 0x13a, 0x636, 0x73f, 0x435, 0x53c, 0xa3c, 0xb35, 0x83f, 0x936, 0xe3a, 0xf33, 0xc39, 0xd30,
    0x3a0, 0x2a9, 0x1a3, 0xaa, 0x7a6, 0x6af, 0x5a5, 0x4ac, 0xbac, 0xaa5, 0x9af, 0x8a6, 0xfaa, 0xea3, 0xda9, 0xca0,
    0x460, 0x569, 0x663, 0x76a, 0x66, 0x16f, 0x265, 0x36c, 0xc6c, 0xd65, 0xe6f, 0xf66, 0x86a, 0x963, 0xa69, 0xb60,
    0x5f0, 0x4f9, 0x7f3, 0x6fa, 0x1f6, 0xff, 0x3f5, 0x2fc, 0xdfc, 0xcf5, 0xfff, 0xef6, 0x9fa, 0x8f3, 0xbf9, 0xaf0, 
    0x650, 0x759, 0x453, 0x55a, 0x256, 0x35f, 0x55, 0x15c, 0xe5c, 0xf55, 0xc5f, 0xd56, 0xa5a, 0xb53, 0x859, 0x950,
    0x7c0, 0x6c9, 0x5c3, 0x4ca, 0x3c6, 0x2cf, 0x1c5, 0xcc, 0xfcc, 0xec5, 0xdcf, 0xcc6, 0xbca, 0xac3, 0x9c9, 0x8c0,
    0x8c0, 0x9c9, 0xac3, 0xbca, 0xcc6, 0xdcf, 0xec5, 0xfcc, 0xcc, 0x1c5, 0x2cf, 0x3c6, 0x4ca, 0x5c3, 0x6c9, 0x7c0,
    0x950, 0x859, 0xb53, 0xa5a, 0xd56, 0xc5f, 0xf55, 0xe5c, 0x15c, 0x55, 0x35f, 0x256, 0x55a, 0x453, 0x759, 0x650,
    0xaf0, 0xbf9, 0x8f3, 0x9fa, 0xef6, 0xfff, 0xcf5, 0xdfc, 0x2fc, 0x3f5, 0xff, 0x1f6, 0x6fa, 0x7f3, 0x4f9, 0x5f0, 
    0xb60, 0xa69, 0x963, 0x86a, 0xf66, 0xe6f, 0xd65, 0xc6c, 0x36c, 0x265, 0x16f, 0x66, 0x76a, 0x663, 0x569, 0x460,
    0xca0, 0xda9, 0xea3, 0xfaa, 0x8a6, 0x9af, 0xaa5, 0xbac, 0x4ac, 0x5a5, 0x6af, 0x7a6, 0xaa, 0x1a3, 0x2a9, 0x3a0,
    0xd30, 0xc39, 0xf33, 0xe3a, 0x936, 0x83f, 0xb35, 0xa3c, 0x53c, 0x435, 0x73f, 0x636, 0x13a, 0x33, 0x339, 0x230,
    0xe90, 0xf99, 0xc93, 0xd9a, 0xa96, 0xb9f, 0x895, 0x99c, 0x69c, 0x795, 0x49f, 0x596, 0x29a, 0x393, 0x99, 0x190,
    0xf00, 0xe09, 0xd03, 0xc0a, 0xb06, 0xa0f, 0x905, 0x80c, 0x70c, 0x605, 0x50f, 0x406, 0x30a, 0x203, 0x109, 0x0
};

static const int triTable[256][16] = {
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
    {0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
    {0,1,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
    {1,8,3,9,8,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
    {1,2,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
    {0,8,3,1,2,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
    {9,2,10,0,2,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
    {2,8,3,2,10,8,10,9,8,-1,-1,-1,-1,-1,-1,-1},
    {3,11,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
    {0,8,11,0,11,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
    {1,9,0,2,3,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
    {1,11,2,1,9,11,9,8,11,-1,-1,-1,-1,-1,-1,-1},
    {3,10,1,11,10,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
    {0,10,1,0,8,10,8,11,10,-1,-1,-1,-1,-1,-1,-1},
    {3,9,0,3,11,9,11,10,9,-1,-1,-1,-1,-1,-1,-1},
    {9,8,10,10,8,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
    {4,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
    {4,3,0,7,3,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
    {0,1,9,8,4,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
    {4,1,9,4,7,1,7,3,1,-1,-1,-1,-1,-1,-1,-1},
    {1,2,10,8,4,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
    {3,4,7,3,0,4,1,2,10,-1,-1,-1,-1,-1,-1,-1},
    {9,2,10,9,0,2,8,4,7,-1,-1,-1,-1,-1,-1,-1},
    {2,10,9,2,9,7,2,7,3,7,9,4,-1,-1,-1,-1},
    {8,4,7,3,11,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
    {11,4,7,11,2,4,2,0,4,-1,-1,-1,-1,-1,-1,-1},
    {9,0,1,8,4,7,2,3,11,-1,-1,-1,-1,-1,-1,-1},
    {4,7,11,9,4,11,9,11,2,9,2,1,-1,-1,-1,-1},
    {3,10,1,3,11,10,7,8,4,-1,-1,-1,-1,-1,-1,-1},
    {1,11,10,1,4,11,1,0,4,7,11,4,-1,-1,-1,-1},
    {4,7,8,9,0,11,9,11,10,11,0,3,-1,-1,-1,-1},
    {4,7,11,4,11,9,9,11,10,-1,-1,-1,-1,-1,-1,-1},
    {9,5,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
    {9,5,4,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
    {0,5,4,1,5,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
    {8,3,1,8,1,5,8,5,4,-1,-1,-1,-1,-1,-1,-1},
    {1,2,10,9,5,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
    {3,0,8,1,2,10,4,9,5,-1,-1,-1,-1,-1,-1,-1},
    {5,2,10,5,4,2,4,0,2,-1,-1,-1,-1,-1,-1,-1},
    {2,10,5,3,2,5,3,5,4,3,4,8,-1,-1,-1,-1},
    {9,5,4,2,3,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
    {0,11,2,0,8,11,4,9,5,-1,-1,-1,-1,-1,-1,-1},
    {0,5,4,0,1,5,2,3,11,-1,-1,-1,-1,-1,-1,-1},
    {2,1,5,2,5,8,2,8,11,4,8,5,-1,-1,-1,-1},
    {10,3,11,10,1,3,9,5,4,-1,-1,-1,-1,-1,-1,-1},
    {4,9,5,0,8,1,0,1,10,0,10,11,-1,-1,-1,-1},
    {5,4,0,5,0,11,5,11,10,11,0,3,-1,-1,-1,-1},
    {5,4,8,5,8,10,10,8,11,-1,-1,-1,-1,-1,-1,-1},
    {9,7,8,5,7,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
    {9,3,0,9,5,3,5,7,3,-1,-1,-1,-1,-1,-1,-1},
    {0,7,8,0,1,7,1,5,7,-1,-1,-1,-1,-1,-1,-1},
    {1,5,3,3,5,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
    {9,7,8,9,5,7,10,1,2,-1,-1,-1,-1,-1,-1,-1},
    {10,1,2,9,5,0,5,7,0,7,3,0,-1,-1,-1,-1},
    {8,0,7,8,7,5,8,5,2,5,0,10,-1,-1,-1,-1},
    {2,10,1,2,1,7,2,7,3,5,7,1,-1,-1,-1,-1},
    {11,2,3,7,8,9,7,9,5,-1,-1,-1,-1,-1,-1,-1},
    {9,5,7,9,7,2,9,2,0,2,7,11,-1,-1,-1,-1},
    {2,3,11,0,1,8,0,8,7,0,7,5,-1,-1,-1,-1},
    {11,2,1,11,1,7,7,1,5,-1,-1,-1,-1,-1,-1,-1},
    {9,5,8,8,5,7,10,1,3,10,3,11,-1,-1,-1,-1},
    {5,7,0,5,0,9,7,11,0,1,0,10,11,10,0,-1},
    {11,10,0,11,0,3,10,5,0,8,0,7,5,7,0,-1},
    {11,10,1,11,1,5,10,8,1,8,5,1,8,7,5,-1},
    {10,6,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
    {0,8,3,10,6,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
    {9,0,1,5,10,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
    {1,8,3,1,9,8,5,10,6,-1,-1,-1,-1,-1,-1,-1},
    {1,6,5,2,6,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
    {1,6,5,1,2,6,3,0,8,-1,-1,-1,-1,-1,-1,-1},
    {9,6,5,9,0,6,0,2,6,-1,-1,-1,-1,-1,-1,-1},
    {5,9,8,5,8,2,5,2,6,3,2,8,-1,-1,-1,-1},
    {2,3,11,10,6,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
    {11,0,8,11,2,0,10,6,5,-1,-1,-1,-1,-1,-1,-1},
    {0,1,9,2,3,11,5,10,6,-1,-1,-1,-1,-1,-1,-1},
    {5,10,6,1,9,8,1,8,11,1,11,2,-1,-1,-1,-1},
    {6,3,11,6,5,3,5,1,3,-1,-1,-1,-1,-1,-1,-1},
    {0,8,11,0,11,5,0,5,1,5,11,6,-1,-1,-1,-1},
    {3,11,6,0,3,6,0,6,5,0,5,9,-1,-1,-1,-1},
    {6,5,9,6,9,11,11,9,8,-1,-1,-1,-1,-1,-1,-1},
    {5,10,6,4,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
    {4,3,0,4,7,3,6,5,10,-1,-1,-1,-1,-1,-1,-1},
    {1,9,0,5,10,6,8,4,7,-1,-1,-1,-1,-1,-1,-1},
    {10,6,5,1,9,4,1,4,7,1,7,3,-1,-1,-1,-1},
    {6,1,2,6,5,1,4,7,8,-1,-1,-1,-1,-1,-1,-1},
    {1,2,5,5,2,6,3,0,4,3,4,7,-1,-1,-1,-1},
    {8,4,7,9,0,5,0,6,5,0,2,6,-1,-1,-1,-1},
    {7,3,9,7,9,4,3,2,9,5,9,6,2,6,9,-1},
    {5,10,6,8,4,7,3,11,2,-1,-1,-1,-1,-1,-1,-1},
    {5,10,6,4,7,2,4,2,0,4,0,11,-1,-1,-1,-1},
    {0,1,9,4,7,8,2,3,11,5,10,6,-1,-1,-1,-1},
    {9,4,1,9,1,11,9,11,2,7,11,1,6,1,5,-1},
    {8,4,7,3,11,5,3,5,1,3,1,6,-1,-1,-1,-1},
    {5,1,11,5,11,6,1,0,11,7,11,4,0,4,11,-1},
    {0,3,8,8,3,11,4,7,5,5,7,6,-1,-1,-1,-1},
    {11,6,7,11,7,4,6,5,7,-1,-1,-1,-1,-1,-1,-1},
    {10,4,9,6,4,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
    {4,10,6,4,9,10,0,8,3,-1,-1,-1,-1,-1,-1,-1},
    {10,0,1,10,6,0,6,4,0,-1,-1,-1,-1,-1,-1,-1},
    {8,3,1,8,1,6,8,6,4,6,1,10,-1,-1,-1,-1},
    {1,4,9,1,2,4,2,6,4,-1,-1,-1,-1,-1,-1,-1},
    {3,0,8,1,2,9,9,2,4,9,4,6,-1,-1,-1,-1},
    {0,2,4,4,2,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
    {8,3,2,8,2,4,4,2,6,-1,-1,-1,-1,-1,-1,-1},
    {10,4,9,10,6,4,11,2,3,-1,-1,-1,-1,-1,-1,-1},
    {0,8,2,2,8,11,4,9,10,10,9,6,-1,-1,-1,-1},
    {3,11,2,0,1,6,0,6,4,0,4,10,-1,-1,-1,-1},
    {6,4,1,6,1,10,4,8,1,11,1,2,8,2,1,-1},
    {9,6,4,9,3,6,9,1,3,11,6,3,-1,-1,-1,-1},
    {8,11,1,8,1,0,11,6,1,9,1,4,6,4,1,-1},
    {3,11,6,3,6,4,0,3,4,-1,-1,-1,-1,-1,-1,-1},
    {6,4,8,11,6,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
    {7,10,6,7,8,10,8,9,10,-1,-1,-1,-1,-1,-1,-1},
    {0,3,7,0,7,10,0,10,9,6,10,7,-1,-1,-1,-1},
    {10,6,7,1,10,7,1,7,8,1,8,0,-1,-1,-1,-1},
    {10,6,7,10,7,1,1,7,3,-1,-1,-1,-1,-1,-1,-1},
    {1,2,6,1,6,8,1,8,9,8,6,7,-1,-1,-1,-1},
    {2,6,9,2,9,7,6,3,9,0,9,1,-1,-1,-1,-1},
    {7,8,0,7,0,6,6,0,2,-1,-1,-1,-1,-1,-1,-1},
    {7,3,2,6,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
    {2,3,11,10,6,8,10,8,9,10,9,7,-1,-1,-1,-1},
    {2,0,7,2,7,11,0,9,7,6,7,10,9,10,7,-1},
    {1,8,0,1,7,8,1,10,7,6,7,10,2,3,11,-1},
    {11,2,1,11,1,7,10,6,1,6,7,1,-1,-1,-1,-1},
    {9,7,8,9,8,1,8,6,1,11,1,3,6,3,1,-1},
    {9,7,0,7,11,0,6,10,0,10,1,0,-1,-1,-1,-1},
    {0,3,11,0,11,8,3,6,11,6,10,11,-1,-1,-1,-1},
    {6,10,7,6,7,11,10,8,7,8,11,7,-1,-1,-1,-1},
    {7,6,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
    {3,0,8,11,7,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
    {0,1,9,11,7,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
    {8,1,9,8,3,1,11,7,6,-1,-1,-1,-1,-1,-1,-1},
    {1,2,10,11,7,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
    {1,2,10,3,0,8,6,11,7,-1,-1,-1,-1,-1,-1,-1},
    {2,9,0,2,10,9,6,11,7,-1,-1,-1,-1,-1,-1,-1},
    {6,11,7,2,10,3,10,8,3,10,9,8,-1,-1,-1,-1},
    {7,2,3,6,2,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
    {7,0,8,7,6,0,6,2,0,-1,-1,-1,-1,-1,-1,-1},
    {2,7,6,2,3,7,0,1,9,-1,-1,-1,-1,-1,-1,-1},
    {1,6,2,1,8,6,1,9,8,8,7,6,-1,-1,-1,-1},
    {10,1,3,10,3,6,10,6,7,7,6,11,-1,-1,-1,-1},
    {6,11,7,1,0,8,1,8,10,10,8,6,-1,-1,-1,-1},
    {3,6,11,3,7,6,0,3,7,0,7,9,-1,-1,-1,-1},
    {7,6,11,7,11,9,9,11,8,-1,-1,-1,-1,-1,-1,-1},
    {7,8,4,6,11,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
    {3,0,4,3,4,6,3,6,11,7,6,4,-1,-1,-1,-1},
    {0,1,9,8,4,6,8,6,11,8,11,7,-1,-1,-1,-1},
    {3,6,11,3,11,7,1,3,7,9,3,1,9,1,4,-1},
    {6,11,7,1,2,10,8,4,1,-1,-1,-1,-1,-1,-1,-1},
    {3,0,4,3,4,1,3,1,2,7,6,11,1,11,2,-1},
    {11,7,6,8,4,0,8,0,9,8,9,2,9,0,10,-1},
    {11,7,6,2,10,1,2,1,4,2,4,3,4,1,9,-1},
    {7,2,3,7,6,2,8,4,2,-1,-1,-1,-1,-1,-1,-1},
    {2,0,4,2,4,6,2,6,7,0,8,4,8,6,4,-1},
    {0,1,9,2,3,4,2,4,6,2,6,7,4,3,8,-1},
    {1,9,4,1,4,2,7,6,2,7,2,3,7,3,8,-1},
    {1,3,11,1,11,7,1,7,6,4,7,1,4,1,10,-1},
    {1,0,4,1,4,7,1,7,6,10,1,6,10,6,11,-1},
    {3,8,0,3,11,8,7,6,8,7,8,9,7,9,4,-1},
    {6,11,7,4,9,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
    {11,7,6,9,5,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
    {0,8,3,9,5,4,11,7,6,-1,-1,-1,-1,-1,-1,-1},
    {5,0,1,5,4,0,7,6,11,-1,-1,-1,-1,-1,-1,-1},
    {11,7,6,8,3,1,8,1,5,8,5,4,-1,-1,-1,-1},
    {10,1,2,6,11,7,5,4,9,-1,-1,-1,-1,-1,-1,-1},
    {6,11,7,0,8,3,1,2,10,4,9,5,-1,-1,-1,-1},
    {5,4,0,5,0,2,5,2,10,7,6,11,-1,-1,-1,-1},
    {11,7,6,8,3,2,8,2,5,8,5,4,5,2,10,-1},
    {6,2,3,6,7,2,5,4,9,-1,-1,-1,-1,-1,-1,-1},
    {9,5,4,7,6,2,7,2,0,7,0,8,-1,-1,-1,-1},
    {5,4,0,5,0,1,7,6,2,7,2,3,-1,-1,-1,-1},
    {8,7,6,8,6,2,8,2,1,8,1,5,1,2,4,-1},
    {10,1,3,10,3,7,10,7,6,5,4,9,-1,-1,-1,-1},
    {0,8,1,8,5,1,8,6,5,8,7,6,4,9,5,-1},
    {11,10,5,11,5,3,11,3,7,5,4,3,4,0,3,-1},
    {6,11,7,5,4,8,4,1,8,4,10,1,-1,-1,-1,-1},
    {8,9,5,8,5,7,7,5,6,-1,-1,-1,-1,-1,-1,-1},
    {3,0,9,3,9,5,3,5,7,6,5,9,-1,-1,-1,-1},
    {0,7,5,0,5,1,7,6,5,-1,-1,-1,-1,-1,-1,-1},
    {1,5,3,1,3,7,5,6,7,-1,-1,-1,-1,-1,-1,-1},
    {1,2,10,9,5,6,9,6,7,9,7,8,-1,-1,-1,-1},
    {2,10,1,3,0,9,3,9,5,3,5,7,5,9,6,-1},
    {10,2,8,10,8,0,10,0,7,10,7,6,5,0,8,-1},
    {6,7,3,6,3,2,7,5,3,1,3,10,5,10,3,-1},
    {5,9,8,5,8,7,2,3,11,-1,-1,-1,-1,-1,-1,-1},
    {9,0,2,9,2,7,9,7,6,7,2,11,-1,-1,-1,-1},
    {0,1,5,0,5,8,7,6,11,7,11,2,7,2,3,-1},
    {6,2,1,6,1,7,2,5,1,5,11,1,5,8,11,-1},
    {1,3,9,9,3,11,5,7,10,5,10,1,5,1,6,-1},
    {11,6,10,11,10,0,1,9,0,9,7,0,9,8,7,-1},
    {8,3,0,8,0,10,8,10,6,8,6,7,6,10,5,-1},
    {6,10,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}
};

// --- Benchmark Globals ---
typedef struct {
    int grid_dim_x;
    int grid_dim_y;
    int grid_dim_z;
    float* scalar_grid;
    unsigned long long final_result;
} BenchmarkData;

static BenchmarkData g_data;

// --- Function Prototypes ---
void setup_benchmark(int argc, char *argv[]);
void run_computation();
void cleanup();

// --- Main Function ---
int main(int argc, char *argv[]) {
    struct timespec start, end;

    setup_benchmark(argc, argv);

    clock_gettime(CLOCK_MONOTONIC, &start);
    run_computation();
    clock_gettime(CLOCK_MONOTONIC, &end);

    cleanup();

    double time_taken = (end.tv_sec - start.tv_sec) + (end.tv_nsec - start.tv_nsec) / 1e9;

    printf("%llu\n", g_data.final_result);
    fprintf(stderr, "%.6f", time_taken);

    return 0;
}

// --- Benchmark Functions ---
void setup_benchmark(int argc, char *argv[]) {
    if (argc != 5) {
        fprintf(stderr, "Usage: %s grid_dim_x grid_dim_y grid_dim_z seed\n", argv[0]);
        exit(1);
    }

    g_data.grid_dim_x = atoi(argv[1]);
    g_data.grid_dim_y = atoi(argv[2]);
    g_data.grid_dim_z = atoi(argv[3]);
    uint32_t seed = (uint32_t)atoi(argv[4]);
    
    if (g_data.grid_dim_x <= 1 || g_data.grid_dim_y <= 1 || g_data.grid_dim_z <= 1) {
        fprintf(stderr, "Grid dimensions must be greater than 1.\n");
        exit(1);
    }

    mt_seed(seed);

    long long total_points = (long long)g_data.grid_dim_x * g_data.grid_dim_y * g_data.grid_dim_z;
    g_data.scalar_grid = (float*)malloc(total_points * sizeof(float));
    if (g_data.scalar_grid == NULL) {
        fprintf(stderr, "Failed to allocate memory for scalar grid\n");
        exit(1);
    }

    for (long long i = 0; i < total_points; ++i) {
        g_data.scalar_grid[i] = (float)mt_rand() / (float)UINT32_MAX;
    }

    g_data.final_result = 0;
}

void run_computation() {
    g_data.final_result = 0;
    const float isolevel = 0.5f;
    const int dx = g_data.grid_dim_x;
    const int dy = g_data.grid_dim_y;

    for (int z = 0; z < g_data.grid_dim_z - 1; ++z) {
        for (int y = 0; y < g_data.grid_dim_y - 1; ++y) {
            for (int x = 0; x < g_data.grid_dim_x - 1; ++x) {
                float grid_values[8];
                int cubeindex = 0;

                // Vertex indices for a cube
                int p[8];
                p[0] = (z * dy + y) * dx + x;
                p[1] = p[0] + 1;
                p[2] = (z * dy + (y + 1)) * dx + (x + 1);
                p[3] = p[2] - 1;
                p[4] = ((z + 1) * dy + y) * dx + x;
                p[5] = p[4] + 1;
                p[6] = ((z + 1) * dy + (y + 1)) * dx + (x + 1);
                p[7] = p[6] - 1;

                // Determine which vertices are inside the surface
                for(int i = 0; i < 8; ++i) {
                    grid_values[i] = g_data.scalar_grid[p[i]];
                    if (grid_values[i] >= isolevel) {
                        cubeindex |= (1 << i);
                    }
                }
                
                // Cube is entirely in/out of the surface
                if (edgeTable[cubeindex] == 0) {
                    continue;
                }

                // Sum up triTable entries as a checksum to prevent dead code elimination
                for (int i = 0; triTable[cubeindex][i] != -1; i++) {
                    g_data.final_result += triTable[cubeindex][i];
                }
            }
        }
    }
}

void cleanup() {
    free(g_data.scalar_grid);
    g_data.scalar_grid = NULL;
}
