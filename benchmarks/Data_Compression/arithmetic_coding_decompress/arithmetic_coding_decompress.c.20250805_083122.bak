#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <time.h>
#include <string.h>

// --- Mersenne Twister (MT19937) --- Do Not Modify ---
#define MT_N 624
#define MT_M 397
#define MT_MATRIX_A 0x9908b0dfUL
#define MT_UPPER_MASK 0x80000000UL
#define MT_LOWER_MASK 0x7fffffffUL

static uint32_t mt[MT_N];
static int mt_index = MT_N + 1;

void mt_seed(uint32_t seed) {
    mt[0] = seed;
    for (mt_index = 1; mt_index < MT_N; mt_index++) {
        mt[mt_index] = (1812433253UL * (mt[mt_index - 1] ^ (mt[mt_index - 1] >> 30)) + mt_index);
    }
}

uint32_t mt_rand(void) {
    uint32_t y;
    static const uint32_t mag01[2] = {0x0UL, MT_MATRIX_A};
    if (mt_index >= MT_N) {
        if (mt_index > MT_N) {
             fprintf(stderr, "FATAL: Mersenne Twister not seeded.\n");
             exit(1);
        }
        for (int i = 0; i < MT_N - MT_M; i++) {
            y = (mt[i] & MT_UPPER_MASK) | (mt[i + 1] & MT_LOWER_MASK);
            mt[i] = mt[i + MT_M] ^ (y >> 1) ^ mag01[y & 0x1UL];
        }
        for (int i = MT_N - MT_M; i < MT_N - 1; i++) {
            y = (mt[i] & MT_UPPER_MASK) | (mt[i + 1] & MT_LOWER_MASK);
            mt[i] = mt[i + (MT_M - MT_N)] ^ (y >> 1) ^ mag01[y & 0x1UL];
        }
        y = (mt[MT_N - 1] & MT_UPPER_MASK) | (mt[0] & MT_LOWER_MASK);
        mt[MT_N - 1] = mt[MT_M - 1] ^ (y >> 1) ^ mag01[y & 0x1UL];
        mt_index = 0;
    }
    y = mt[mt_index++];
    y ^= (y >> 11); y ^= (y << 7) & 0x9d2c5680UL; y ^= (y << 15) & 0xefc60000UL; y ^= (y >> 18);
    return y;
}
// --- End of Mersenne Twister ---

// --- Benchmark Globals ---
#define ALPHABET_SIZE 256

// Pointers to data
static uint32_t *compressed_data = NULL;
static unsigned char *decompressed_data = NULL;

// Data sizes and model
static size_t original_size;
static size_t compressed_size_bits;
static uint64_t cumulative_frequencies[ALPHABET_SIZE + 1];
static uint64_t total_frequency;

// Final result
static volatile unsigned int final_checksum;

// --- Arithmetic Coding Constants ---
#define CODE_VALUE_BITS 62
const uint64_t MAX_CODE         = (1ULL << CODE_VALUE_BITS) - 1;
const uint64_t TOP_VALUE_MASK   = 1ULL << (CODE_VALUE_BITS - 1);
const uint64_t ONE_QUARTER      = 1ULL << (CODE_VALUE_BITS - 2);
const uint64_t HALF             = 2 * ONE_QUARTER;
const uint64_t THREE_QUARTERS   = 3 * ONE_QUARTER;

// --- Benchmark Functions ---

void setup_benchmark(int argc, char *argv[]) {
    if (argc != 3) {
        fprintf(stderr, "Usage: %s <input_size_mb> <seed>\n", argv[0]);
        exit(1);
    }

    int input_size_mb = atoi(argv[1]);
    uint32_t seed = atoi(argv[2]);
    mt_seed(seed);

    original_size = (size_t)input_size_mb * 1024 * 1024;

    // Allocate temporary buffer for original data (only used in setup)
    unsigned char* original_data = (unsigned char*)malloc(original_size);
    if (!original_data) { perror("malloc original_data failed"); exit(1); }

    // Allocate memory for compressed and decompressed data
    // Max compressed size is roughly original_size + some overhead
    size_t compressed_capacity_words = (original_size / 32) + 128;
    compressed_data = (uint32_t*)malloc(compressed_capacity_words * sizeof(uint32_t));
    if (!compressed_data) { perror("malloc compressed_data failed"); exit(1); }
    
    decompressed_data = (unsigned char*)malloc(original_size);
    if (!decompressed_data) { perror("malloc decompressed_data failed"); exit(1); }

    // Generate skewed random data to make it compressible
    // Frequencies of symbols 0-159 will be higher.
    for (size_t i = 0; i < original_size; ++i) {
        original_data[i] = mt_rand() % 160;
    }

    // --- Create Frequency Model ---
    uint64_t freqs[ALPHABET_SIZE] = {0};
    for (size_t i = 0; i < original_size; ++i) {
        freqs[original_data[i]]++;
    }

    cumulative_frequencies[0] = 0;
    for (int i = 0; i < ALPHABET_SIZE; ++i) {
        cumulative_frequencies[i + 1] = cumulative_frequencies[i] + freqs[i];
    }
    total_frequency = cumulative_frequencies[ALPHABET_SIZE];

    // --- Arithmetic ENCODING (to generate test data for the decoder) ---
    uint64_t low = 0;
    uint64_t high = MAX_CODE;
    long pending_bits = 0;

    // Bit buffer state
    size_t bit_count = 0;
    size_t word_idx = 0;
    compressed_data[0] = 0;

    #define PUT_BIT(bit) do { \
        if (bit) compressed_data[word_idx] |= (1U << (31 - (bit_count % 32))); \
        bit_count++; \
        if ((bit_count % 32) == 0) { \
            word_idx++; \
            if (word_idx >= compressed_capacity_words) { \
                fprintf(stderr, "FATAL: Compressed buffer overflow\n"); exit(1); \
            } \
            compressed_data[word_idx] = 0; \
        } \
    } while(0)

    #define OUTPUT_AND_FOLLOW(bit) do { \
        PUT_BIT(bit); \
        for (; pending_bits > 0; pending_bits--) { \
            PUT_BIT(!(bit)); \
        } \
    } while(0)

    for (size_t i = 0; i < original_size; ++i) {
        unsigned char symbol = original_data[i];
        uint64_t range = high - low + 1;
        high = low + (range * cumulative_frequencies[symbol + 1]) / total_frequency - 1;
        low = low + (range * cumulative_frequencies[symbol]) / total_frequency;

        for (;;) {
            if (high < HALF) {
                OUTPUT_AND_FOLLOW(0);
            } else if (low >= HALF) {
                OUTPUT_AND_FOLLOW(1);
                low -= HALF;
                high -= HALF;
            } else if (low >= ONE_QUARTER && high < THREE_QUARTERS) {
                pending_bits++;
                low -= ONE_QUARTER;
                high -= ONE_QUARTER;
            } else {
                break;
            }
            low <<= 1;
            high <<= 1;
            high |= 1;
        }
    }

    pending_bits++;
    if (low < ONE_QUARTER) OUTPUT_AND_FOLLOW(0); else OUTPUT_AND_FOLLOW(1);

    compressed_size_bits = bit_count;

    free(original_data); // Free temporary data
}

void run_computation() {
    // --- Arithmetic DECODING ---
    uint64_t low = 0;
    uint64_t high = MAX_CODE;
    uint64_t value = 0;

    // Bit reader state
    size_t bit_idx = 0;

    #define GET_BIT() ( (compressed_data[bit_idx >> 5] >> (31 - (bit_idx++ & 0x1F))) & 1 )

    // Fill initial value from the bit stream
    for (int i = 0; i < CODE_VALUE_BITS; ++i) {
        value = (value << 1) | GET_BIT();
    }

    for (size_t i = 0; i < original_size; ++i) {
        uint64_t range = high - low + 1;
        uint64_t target = ((value - low + 1) * total_frequency - 1) / range;

        // Find symbol (linear search is fine for ALPHABET_SIZE=256)
        int symbol = 255;
        while (cumulative_frequencies[symbol] > target) {
            symbol--;
        }
        decompressed_data[i] = (unsigned char)symbol;

        // Update range
        high = low + (range * cumulative_frequencies[symbol + 1]) / total_frequency - 1;
        low = low + (range * cumulative_frequencies[symbol]) / total_frequency;

        for (;;) {
            if (high < HALF) {
                // No action needed
            } else if (low >= HALF) {
                value -= HALF;
                low -= HALF;
                high -= HALF;
            } else if (low >= ONE_QUARTER && high < THREE_QUARTERS) {
                value -= ONE_QUARTER;
                low -= ONE_QUARTER;
                high -= ONE_QUARTER;
            } else {
                break;
            }
            low <<= 1;
            high <<= 1;
            high |= 1;
            value = (value << 1) | GET_BIT();
        }
    }

    // Calculate a checksum to prevent dead code elimination
    unsigned int checksum = 0;
    for (size_t i = 0; i < original_size; ++i) {
        checksum = (checksum + decompressed_data[i]) * 31;
    }
    final_checksum = checksum;
}

void cleanup() {
    free(compressed_data);
    free(decompressed_data);
}

int main(int argc, char *argv[]) {
    struct timespec start, end;

    setup_benchmark(argc, argv);

    clock_gettime(CLOCK_MONOTONIC, &start);
    run_computation();
    clock_gettime(CLOCK_MONOTONIC, &end);

    cleanup();

    double time_taken = (end.tv_sec - start.tv_sec) + (end.tv_nsec - start.tv_nsec) / 1e9;

    // Print final result to stdout
    printf("%u\n", final_checksum);

    // Print time to stderr
    fprintf(stderr, "%.6f", time_taken);

    return 0;
}
