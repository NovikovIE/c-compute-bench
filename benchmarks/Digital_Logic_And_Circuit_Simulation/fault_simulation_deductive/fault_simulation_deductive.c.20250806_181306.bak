/*
 * fault_simulation_deductive: Deductive Fault Simulation Benchmark
 * 
 * This program simulates the behavior of a digital logic circuit and performs
 * deductive fault simulation to determine the set of faults detected by a given
 * set of test vectors. The simulation works by first calculating the behavior of
 * the "good" (fault-free) circuit. Then, for each gate, it deduces a "fault list",
 * represented as a bitmask, which contains all faults that would cause the gate's
 * output to be different from its good value. This process is computationally
 * intensive, involving numerous bitwise operations on large bitmasks for each
 * gate in the circuit and for each test vector.
 */
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <time.h>
#include <string.h>

// --- Mersenne Twister (MT19937) Generator (DO NOT MODIFY) ---
#define MT_N 624
#define MT_M 397
#define MT_MATRIX_A 0x9908b0dfUL
#define MT_UPPER_MASK 0x80000000UL
#define MT_LOWER_MASK 0x7fffffffUL

static uint32_t mt[MT_N];
static int mt_index = MT_N + 1;

void mt_seed(uint32_t seed) {
    mt[0] = seed;
    for (mt_index = 1; mt_index < MT_N; mt_index++) {
        mt[mt_index] = (1812433253UL * (mt[mt_index - 1] ^ (mt[mt_index - 1] >> 30)) + mt_index);
    }
}

uint32_t mt_rand(void) {
    uint32_t y;
    static const uint32_t mag01[2] = {0x0UL, MT_MATRIX_A};
    if (mt_index >= MT_N) {
        if (mt_index > MT_N) {
             fprintf(stderr, "FATAL: Mersenne Twister not seeded.");
             exit(1);
        }
        for (int i = 0; i < MT_N - MT_M; i++) {
            y = (mt[i] & MT_UPPER_MASK) | (mt[i + 1] & MT_LOWER_MASK);
            mt[i] = mt[i + MT_M] ^ (y >> 1) ^ mag01[y & 0x1UL];
        }
        for (int i = MT_N - MT_M; i < MT_N - 1; i++) {
            y = (mt[i] & MT_UPPER_MASK) | (mt[i + 1] & MT_LOWER_MASK);
            mt[i] = mt[i + (MT_M - MT_N)] ^ (y >> 1) ^ mag01[y & 0x1UL];
        }
        y = (mt[MT_N - 1] & MT_UPPER_MASK) | (mt[0] & MT_LOWER_MASK);
        mt[MT_N - 1] = mt[MT_M - 1] ^ (y >> 1) ^ mag01[y & 0x1UL];
        mt_index = 0;
    }
    y = mt[mt_index++];
    y ^= (y >> 11); y ^= (y << 7) & 0x9d2c5680UL; y ^= (y << 15) & 0xefc60000UL; y ^= (y >> 18);
    return y;
}
// --- End of Mersenne Twister ---

// Benchmark-specific data structures
typedef enum {
    GATE_INPUT,
    GATE_AND,
    GATE_OR,
    GATE_XOR,
    GATE_NOT,
    GATE_BUF
} GateType;

typedef struct {
    GateType type;
    int input1;
    int input2;       // Unused for NOT, BUF
    int good_value;   // 0 or 1
    uint64_t* fault_list_mask; // Bitmask for fault lists
} Gate;

typedef struct {
    int num_gates;
    int num_primary_inputs;
    int num_primary_outputs;
    int num_test_vectors;
    int fault_mask_size_words; // Size of fault_list_mask in uint64_t

    Gate* gates;
    int* primary_outputs;
    int** test_vectors;
} BenchmarkData;

// Global pointer to benchmark data
static BenchmarkData* g_data = NULL;
static long long final_result = 0;

// Function to set a specific fault bit in a mask
void set_fault_bit(uint64_t* mask, int fault_index) {
    int word_index = fault_index / 64;
    int bit_index = fault_index % 64;
    mask[word_index] |= (1ULL << bit_index);
}

// --- Benchmark Functions ---

void setup_benchmark(int argc, char* argv[]) {
    if (argc != 6) {
        fprintf(stderr, "Usage: %s num_gates num_primary_inputs num_primary_outputs num_test_vectors seed\n", argv[0]);
        exit(1);
    }

    g_data = (BenchmarkData*)malloc(sizeof(BenchmarkData));
    if (!g_data) {
        perror("Failed to allocate memory for benchmark data");
        exit(1);
    }

    g_data->num_gates = atoi(argv[1]);
    g_data->num_primary_inputs = atoi(argv[2]);
    g_data->num_primary_outputs = atoi(argv[3]);
    g_data->num_test_vectors = atoi(argv[4]);
    uint32_t seed = (uint32_t)atoi(argv[5]);
    mt_seed(seed);

    if (g_data->num_primary_inputs >= g_data->num_gates || 
        g_data->num_primary_outputs > (g_data->num_gates - g_data->num_primary_inputs)) {
        fprintf(stderr, "Invalid parameters: PI/PO count exceeds available gates.\n");
        exit(1);
    }

    // Each gate can have stuck-at-0 and stuck-at-1 faults
    int num_faults = g_data->num_gates * 2;
    g_data->fault_mask_size_words = (num_faults + 63) / 64;

    // Allocate circuit
    g_data->gates = (Gate*)malloc(g_data->num_gates * sizeof(Gate));
    if (!g_data->gates) { perror("malloc gates"); exit(1); }
    for (int i = 0; i < g_data->num_gates; ++i) {
        g_data->gates[i].fault_list_mask = (uint64_t*)calloc(g_data->fault_mask_size_words, sizeof(uint64_t));
        if (!g_data->gates[i].fault_list_mask) { perror("calloc fault_list_mask"); exit(1); }
    }
    
    // Generate circuit structure (levelized DAG)
    for (int i = 0; i < g_data->num_gates; ++i) {
        if (i < g_data->num_primary_inputs) {
            g_data->gates[i].type = GATE_INPUT;
        } else {
            g_data->gates[i].type = (GateType)((mt_rand() % 5) + 1); // AND, OR, XOR, NOT, BUF
            g_data->gates[i].input1 = mt_rand() % i;
            if (g_data->gates[i].type == GATE_AND || g_data->gates[i].type == GATE_OR || g_data->gates[i].type == GATE_XOR) {
                g_data->gates[i].input2 = mt_rand() % i;
            }
        }
    }
    
    // Select primary outputs from non-input gates
    g_data->primary_outputs = (int*)malloc(g_data->num_primary_outputs * sizeof(int));
    if (!g_data->primary_outputs) { perror("malloc primary_outputs"); exit(1); }
    for (int i = 0; i < g_data->num_primary_outputs; ++i) {
        g_data->primary_outputs[i] = g_data->num_primary_inputs + (mt_rand() % (g_data->num_gates - g_data->num_primary_inputs));
    }

    // Generate test vectors
    g_data->test_vectors = (int**)malloc(g_data->num_test_vectors * sizeof(int*));
    if (!g_data->test_vectors) { perror("malloc test_vectors"); exit(1); }
    for (int i = 0; i < g_data->num_test_vectors; ++i) {
        g_data->test_vectors[i] = (int*)malloc(g_data->num_primary_inputs * sizeof(int));
        if (!g_data->test_vectors[i]) { perror("malloc test_vector row"); exit(1); }
        for (int j = 0; j < g_data->num_primary_inputs; ++j) {
            g_data->test_vectors[i][j] = mt_rand() % 2;
        }
    }
}

void run_computation() {
    long long total_detected_faults = 0;
    const int mask_size = g_data->fault_mask_size_words;

    for (int v = 0; v < g_data->num_test_vectors; ++v) {
        // 1. Good circuit simulation
        for (int i = 0; i < g_data->num_gates; ++i) {
            Gate* gate = &g_data->gates[i];
            if (gate->type == GATE_INPUT) {
                gate->good_value = g_data->test_vectors[v][i];
            } else {
                int v1 = g_data->gates[gate->input1].good_value;
                int v2 = g_data->gates[gate->input2].good_value;
                switch (gate->type) {
                    case GATE_AND: gate->good_value = v1 & v2; break;
                    case GATE_OR:  gate->good_value = v1 | v2; break;
                    case GATE_XOR: gate->good_value = v1 ^ v2; break;
                    case GATE_NOT: gate->good_value = !v1; break;
                    case GATE_BUF: gate->good_value = v1; break;
                    case GATE_INPUT: break; // Should not happen
                }
            }
        }

        // 2. Deductive fault simulation
        for (int i = 0; i < g_data->num_gates; ++i) {
            Gate* gate = &g_data->gates[i];
            uint64_t* out_mask = gate->fault_list_mask;
            memset(out_mask, 0, mask_size * sizeof(uint64_t));

            if (gate->type == GATE_INPUT) {
                // Fault list is just its own stuck-at fault
            } else {
                uint64_t* in1_mask = g_data->gates[gate->input1].fault_list_mask;
                int v1 = g_data->gates[gate->input1].good_value;
                
                if (gate->type == GATE_NOT || gate->type == GATE_BUF) {
                    for (int k = 0; k < mask_size; ++k) out_mask[k] = in1_mask[k];
                } else {
                    uint64_t* in2_mask = g_data->gates[gate->input2].fault_list_mask;
                    int v2 = g_data->gates[gate->input2].good_value;

                    if (gate->type == GATE_XOR) {
                        for (int k = 0; k < mask_size; ++k) out_mask[k] = in1_mask[k] ^ in2_mask[k];
                    } else if (gate->type == GATE_AND) {
                        for (int k = 0; k < mask_size; ++k) {
                            if (v1 == 0 && v2 == 0) out_mask[k] = in1_mask[k] & in2_mask[k]; // Intersection
                            else if (v1 == 0 && v2 == 1) out_mask[k] = in1_mask[k] & ~in2_mask[k]; // Difference
                            else if (v1 == 1 && v2 == 0) out_mask[k] = in2_mask[k] & ~in1_mask[k]; // Difference
                            else out_mask[k] = in1_mask[k] | in2_mask[k]; // Union
                        }
                    } else if (gate->type == GATE_OR) {
                       for (int k = 0; k < mask_size; ++k) {
                            if (v1 == 0 && v2 == 0) out_mask[k] = in1_mask[k] | in2_mask[k]; // Union
                            else if (v1 == 0 && v2 == 1) out_mask[k] = in2_mask[k] & ~in1_mask[k]; // Difference
                            else if (v1 == 1 && v2 == 0) out_mask[k] = in1_mask[k] & ~in2_mask[k]; // Difference
                            else out_mask[k] = in1_mask[k] & in2_mask[k]; // Intersection
                        }
                    }
                }
            }
            // Add self-fault (stuck-at-the-opposite-of-good-value)
            set_fault_bit(out_mask, i * 2 + (1 - gate->good_value));
        }

        // 3. Accumulate detected faults at primary outputs
        for (int i = 0; i < g_data->num_primary_outputs; ++i) {
            int po_gate_idx = g_data->primary_outputs[i];
            uint64_t* po_mask = g_data->gates[po_gate_idx].fault_list_mask;
            for (int k = 0; k < mask_size; ++k) {
                if (po_mask[k] != 0) {
                    total_detected_faults += __builtin_popcountll(po_mask[k]);
                }
            }
        }
    }
    final_result = total_detected_faults;
}

void cleanup() {
    if (!g_data) return;

    for (int i = 0; i < g_data->num_gates; ++i) {
        free(g_data->gates[i].fault_list_mask);
    }
    free(g_data->gates);

    free(g_data->primary_outputs);

    for (int i = 0; i < g_data->num_test_vectors; ++i) {
        free(g_data->test_vectors[i]);
    }
    free(g_data->test_vectors);

    free(g_data);
    g_data = NULL;
}

int main(int argc, char* argv[]) {
    struct timespec start, end;

    setup_benchmark(argc, argv);

    clock_gettime(CLOCK_MONOTONIC, &start);
    run_computation();
    clock_gettime(CLOCK_MONOTONIC, &end);

    cleanup();

    double time_taken = (end.tv_sec - start.tv_sec) + (end.tv_nsec - start.tv_nsec) / 1e9;

    // Print result to stdout
    printf("%lld\n", final_result);

    // Print time to stderr
    fprintf(stderr, "%.6f", time_taken);

    return 0;
}
