#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <time.h>
#include <math.h>

// --- Mersenne Twister (MT19937) Generator ---
#define MT_N 624
#define MT_M 397
#define MT_MATRIX_A 0x9908b0dfUL
#define MT_UPPER_MASK 0x80000000UL
#define MT_LOWER_MASK 0x7fffffffUL

static uint32_t mt[MT_N];
static int mt_index = MT_N + 1;

void mt_seed(uint32_t seed) {
    mt[0] = seed;
    for (mt_index = 1; mt_index < MT_N; mt_index++) {
        mt[mt_index] = (1812433253UL * (mt[mt_index - 1] ^ (mt[mt_index - 1] >> 30)) + mt_index);
    }
}

uint32_t mt_rand(void) {
    uint32_t y;
    static const uint32_t mag01[2] = {0x0UL, MT_MATRIX_A};
    if (mt_index >= MT_N) {
        if (mt_index > MT_N) {
             fprintf(stderr, "FATAL: Mersenne Twister not seeded.\n");
             exit(1);
        }
        for (int i = 0; i < MT_N - MT_M; i++) {
            y = (mt[i] & MT_UPPER_MASK) | (mt[i + 1] & MT_LOWER_MASK);
            mt[i] = mt[i + MT_M] ^ (y >> 1) ^ mag01[y & 0x1UL];
        }
        for (int i = MT_N - MT_M; i < MT_N - 1; i++) {
            y = (mt[i] & MT_UPPER_MASK) | (mt[i + 1] & MT_LOWER_MASK);
            mt[i] = mt[i + (MT_M - MT_N)] ^ (y >> 1) ^ mag01[y & 0x1UL];
        }
        y = (mt[MT_N - 1] & MT_UPPER_MASK) | (mt[0] & MT_LOWER_MASK);
        mt[MT_N - 1] = mt[MT_M - 1] ^ (y >> 1) ^ mag01[y & 0x1UL];
        mt_index = 0;
    }
    y = mt[mt_index++];
    y ^= (y >> 11); y ^= (y << 7) & 0x9d2c5680UL; y ^= (y << 15) & 0xefc60000UL; y ^= (y >> 18);
    return y;
}

// --- Benchmark Globals ---

#ifndef M_PI
#define M_PI 3.14159265358979323846
#endif

// Parameters
static int signal_length;
static int window_size;
static int hop_size;
static int num_frames;
static int num_freq_bins;

// Data
static double* signal;
static double* window;
static double** stft_magnitude;

// Result accumulator
double final_result = 0.0;


// --- Benchmark Functions ---

void setup_benchmark(int argc, char *argv[]) {
    if (argc != 5) {
        fprintf(stderr, "Usage: %s signal_length window_size hop_size seed\n", argv[0]);
        exit(1);
    }

    signal_length = atoi(argv[1]);
    window_size = atoi(argv[2]);
    hop_size = atoi(argv[3]);
    uint32_t seed = (uint32_t)atoi(argv[4]);
    mt_seed(seed);

    if (signal_length <= 0 || window_size <= 0 || hop_size <= 0 || window_size > signal_length) {
        fprintf(stderr, "Invalid parameters.\n");
        exit(1);
    }

    // Calculate dependent parameters
    num_frames = (signal_length - window_size) / hop_size + 1;
    num_freq_bins = window_size / 2 + 1; // Only compute up to Nyquist frequency

    // Allocate memory
    signal = (double*)malloc(signal_length * sizeof(double));
    window = (double*)malloc(window_size * sizeof(double));
    stft_magnitude = (double**)malloc(num_frames * sizeof(double*));
    if (!signal || !window || !stft_magnitude) {
        fprintf(stderr, "Memory allocation failed.\n");
        exit(1);
    }
    for (int i = 0; i < num_frames; ++i) {
        stft_magnitude[i] = (double*)malloc(num_freq_bins * sizeof(double));
        if (!stft_magnitude[i]) {
            fprintf(stderr, "Memory allocation failed.\n");
            exit(1);
        }
    }

    // Generate input signal data (-1.0 to 1.0)
    for (int i = 0; i < signal_length; ++i) {
        signal[i] = ((double)mt_rand() / (double)UINT32_MAX) * 2.0 - 1.0;
    }

    // Generate Hamming window
    for (int i = 0; i < window_size; ++i) {
        window[i] = 0.54 - 0.46 * cos(2.0 * M_PI * i / (window_size - 1));
    }
}

void run_computation() {
    double* windowed_frame = (double*)malloc(window_size * sizeof(double));
    if (!windowed_frame) {
        fprintf(stderr, "Failed to allocate temporary frame buffer.\n");
        exit(1);
    }

    int frame_idx = 0;
    for (int i = 0; i <= signal_length - window_size; i += hop_size) {
        // Apply window to the current frame
        for (int n = 0; n < window_size; ++n) {
            windowed_frame[n] = signal[i + n] * window[n];
        }

        // Perform DFT for each frequency bin
        for (int k = 0; k < num_freq_bins; ++k) {
            double real_part = 0.0;
            double imag_part = 0.0;
            for (int n = 0; n < window_size; ++n) {
                double angle = -2.0 * M_PI * k * n / window_size;
                real_part += windowed_frame[n] * cos(angle);
                imag_part += windowed_frame[n] * sin(angle);
            }
            stft_magnitude[frame_idx][k] = sqrt(real_part * real_part + imag_part * imag_part);
        }
        frame_idx++;
    }

    // Accumulate a final result to prevent dead code elimination
    // We sum the magnitudes of the middle frequency bin across all frames
    int mid_bin = num_freq_bins / 2;
    double sum = 0.0;
    for (int i = 0; i < num_frames; ++i) {
        sum += stft_magnitude[i][mid_bin];
    }
    final_result = sum;

    free(windowed_frame);
}

void cleanup() {
    free(signal);
    free(window);
    for (int i = 0; i < num_frames; ++i) {
        free(stft_magnitude[i]);
    }
    free(stft_magnitude);
}

int main(int argc, char *argv[]) {
    struct timespec start, end;

    setup_benchmark(argc, argv);

    clock_gettime(CLOCK_MONOTONIC, &start);
    run_computation();
    clock_gettime(CLOCK_MONOTONIC, &end);

    cleanup();

    double time_taken = (end.tv_sec - start.tv_sec) + (end.tv_nsec - start.tv_nsec) / 1e9;

    // Print result to stdout
    printf("%f\n", final_result);

    // Print time to stderr
    fprintf(stderr, "%.6f", time_taken);

    return 0;
}
