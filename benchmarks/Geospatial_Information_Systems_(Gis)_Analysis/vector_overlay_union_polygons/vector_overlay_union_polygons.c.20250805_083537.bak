#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <time.h>
#include <math.h>

#ifndef M_PI
#define M_PI 3.14159265358979323846
#endif

// --- START MERSENNE TWISTER (DO NOT MODIFY) ---
#define MT_N 624
#define MT_M 397
#define MT_MATRIX_A 0x9908b0dfUL
#define MT_UPPER_MASK 0x80000000UL
#define MT_LOWER_MASK 0x7fffffffUL

static uint32_t mt[MT_N];
static int mt_index = MT_N + 1;

void mt_seed(uint32_t seed) {
    mt[0] = seed;
    for (mt_index = 1; mt_index < MT_N; mt_index++) {
        mt[mt_index] = (1812433253UL * (mt[mt_index - 1] ^ (mt[mt_index - 1] >> 30)) + mt_index);
    }
}

uint32_t mt_rand(void) {
    uint32_t y;
    static const uint32_t mag01[2] = {0x0UL, MT_MATRIX_A};
    if (mt_index >= MT_N) {
        if (mt_index > MT_N) {
             fprintf(stderr, "FATAL: Mersenne Twister not seeded.\n");
             exit(1);
        }
        for (int i = 0; i < MT_N - MT_M; i++) {
            y = (mt[i] & MT_UPPER_MASK) | (mt[i + 1] & MT_LOWER_MASK);
            mt[i] = mt[i + MT_M] ^ (y >> 1) ^ mag01[y & 0x1UL];
        }
        for (int i = MT_N - MT_M; i < MT_N - 1; i++) {
            y = (mt[i] & MT_UPPER_MASK) | (mt[i + 1] & MT_LOWER_MASK);
            mt[i] = mt[i + (MT_M - MT_N)] ^ (y >> 1) ^ mag01[y & 0x1UL];
        }
        y = (mt[MT_N - 1] & MT_UPPER_MASK) | (mt[0] & MT_LOWER_MASK);
        mt[MT_N - 1] = mt[MT_M - 1] ^ (y >> 1) ^ mag01[y & 0x1UL];
        mt_index = 0;
    }
    y = mt[mt_index++];
    y ^= (y >> 11); y ^= (y << 7) & 0x9d2c5680UL; y ^= (y << 15) & 0xefc60000UL; y ^= (y >> 18);
    return y;
}
// --- END MERSENNE TWISTER ---

// --- BENCHMARK DATA STRUCTURES ---
typedef struct {
    double x;
    double y;
} Point;

typedef struct {
    Point *vertices;
    int num_vertices;
    Point min_bound; // Bounding box for fast checks
    Point max_bound; // Bounding box for fast checks
} Polygon;

// --- GLOBAL STATE ---
Polygon *polygons_A = NULL;
Polygon *polygons_B = NULL;
int num_polygons_A_val;
int num_polygons_B_val;

Point g_centroid_for_sort; // Used by qsort comparison function
double computation_result = 0.0;

// --- HELPER FUNCTIONS ---

// qsort comparison function to sort points by angle around a centroid
int compare_points_by_angle(const void* a, const void* b) {
    Point p1 = *(Point*)a;
    Point p2 = *(Point*)b;
    double angle1 = atan2(p1.y - g_centroid_for_sort.y, p1.x - g_centroid_for_sort.x);
    double angle2 = atan2(p2.y - g_centroid_for_sort.y, p2.x - g_centroid_for_sort.x);
    if (angle1 < angle2) return -1;
    if (angle1 > angle2) return 1;
    return 0;
}

// Generates a simple (non-self-intersecting) polygon
void generate_polygon(Polygon *p, int avg_vertices) {
    int v_variance = avg_vertices > 4 ? 4 : avg_vertices - 1;
    if (v_variance < 0) v_variance = 0;
    p->num_vertices = avg_vertices - (v_variance/2) + (mt_rand() % (v_variance + 1));
    if (p->num_vertices < 3) p->num_vertices = 3;

    p->vertices = (Point *)malloc(p->num_vertices * sizeof(Point));
    if(!p->vertices) { fprintf(stderr, "Memory allocation failed\n"); exit(1); }

    double center_x = (mt_rand() % 20000) / 10.0 - 1000.0;
    double base_radius = (mt_rand() % 500) / 10.0 + 20.0;
    
    g_centroid_for_sort.x = 0; g_centroid_for_sort.y = 0;

    for (int i = 0; i < p->num_vertices; i++) {
        double angle = 2.0 * M_PI * mt_rand() / UINT32_MAX;
        double radius = base_radius * (((double)(mt_rand() % 1000) / 2000.0) + 0.75);
        p->vertices[i].x = center_x + radius * cos(angle);
        p->vertices[i].y = center_y + radius * sin(angle);
        g_centroid_for_sort.x += p->vertices[i].x;
        g_centroid_for_sort.y += p->vertices[i].y;
    }
    g_centroid_for_sort.x /= p->num_vertices;
    g_centroid_for_sort.y /= p->num_vertices;

    qsort(p->vertices, p->num_vertices, sizeof(Point), compare_points_by_angle);

    p->min_bound = p->max_bound = p->vertices[0];
    for (int i = 1; i < p->num_vertices; i++) {
        if (p->vertices[i].x < p->min_bound.x) p->min_bound.x = p->vertices[i].x;
        if (p->vertices[i].y < p->min_bound.y) p->min_bound.y = p->vertices[i].y;
        if (p->vertices[i].x > p->max_bound.x) p->max_bound.x = p->vertices[i].x;
        if (p->vertices[i].y > p->max_bound.y) p->max_bound.y = p->vertices[i].y;
    }
}

// Point-in-polygon test using the Ray Casting algorithm
int is_inside(const Polygon *poly, Point p) {
    int i, j, c = 0;
    for (i = 0, j = poly->num_vertices - 1; i < poly->num_vertices; j = i++) {
        if (((poly->vertices[i].y > p.y) != (poly->vertices[j].y > p.y)) &&
            (p.x < (poly->vertices[j].x - poly->vertices[i].x) * (p.y - poly->vertices[i].y) / (poly->vertices[j].y - poly->vertices[i].y) + poly->vertices[i].x))
            c = !c;
    }
    return c;
}

// --- BENCHMARK FUNCTIONS ---

void setup_benchmark(int argc, char *argv[]) {
    if (argc != 6) {
        fprintf(stderr, "Usage: %s num_polygons_A avg_vertices_A num_polygons_B avg_vertices_B seed\n", argv[0]);
        exit(1);
    }

    num_polygons_A_val = atoi(argv[1]);
    int avg_vertices_A = atoi(argv[2]);
    num_polygons_B_val = atoi(argv[3]);
    int avg_vertices_B = atoi(argv[4]);
    mt_seed((uint32_t)atoi(argv[5]));

    polygons_A = (Polygon *)malloc(num_polygons_A_val * sizeof(Polygon));
    polygons_B = (Polygon *)malloc(num_polygons_B_val * sizeof(Polygon));
    if (!polygons_A || !polygons_B) { fprintf(stderr, "Memory allocation failed\n"); exit(1); }

    for (int i = 0; i < num_polygons_A_val; i++) {
        generate_polygon(&polygons_A[i], avg_vertices_A);
    }
    for (int i = 0; i < num_polygons_B_val; i++) {
        generate_polygon(&polygons_B[i], avg_vertices_B);
    }
}

void run_computation() {
    double accumulator = 0.0;
    for (int i = 0; i < num_polygons_A_val; i++) {
        for (int j = 0; j < num_polygons_B_val; j++) {
            Polygon *pA = &polygons_A[i];
            Polygon *pB = &polygons_B[j];

            if (pA->max_bound.x < pB->min_bound.x || pA->min_bound.x > pB->max_bound.x ||
                pA->max_bound.y < pB->min_bound.y || pA->min_bound.y > pB->max_bound.y) {
                continue;
            }

            int points_inside = 0;
            int step = pA->num_vertices > 10 ? pA->num_vertices / 10 : 1;
            for (int k = 0; k < pA->num_vertices; k += step) {
                if (is_inside(pB, pA->vertices[k])) {
                    points_inside++;
                }
            }
            
            if (points_inside > 0) {
                accumulator += (double)points_inside * (pA->num_vertices + pB->num_vertices);
            }
        }
    }
    computation_result = accumulator;
}

void cleanup() {
    for (int i = 0; i < num_polygons_A_val; i++) {
        free(polygons_A[i].vertices);
    }
    free(polygons_A);

    for (int i = 0; i < num_polygons_B_val; i++) {
        free(polygons_B[i].vertices);
    }
    free(polygons_B);
}

int main(int argc, char *argv[]) {
    struct timespec start, end;

    setup_benchmark(argc, argv);

    clock_gettime(CLOCK_MONOTONIC, &start);
    run_computation();
    clock_gettime(CLOCK_MONOTONIC, &end);

    cleanup();

    double time_taken = (end.tv_sec - start.tv_sec) + (end.tv_nsec - start.tv_nsec) / 1e9;

    printf("%lld\n", (long long)computation_result);
    fprintf(stderr, "%.6f", time_taken);

    return 0;
}
