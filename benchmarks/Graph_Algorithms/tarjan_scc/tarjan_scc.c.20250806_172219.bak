#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <time.h>
#include <stdbool.h>
#include <string.h>

// --- Mersenne Twister (DO NOT MODIFY) ---
#define MT_N 624
#define MT_M 397
#define MT_MATRIX_A 0x9908b0dfUL
#define MT_UPPER_MASK 0x80000000UL
#define MT_LOWER_MASK 0x7fffffffUL

static uint32_t mt[MT_N];
static int mt_index = MT_N + 1;

void mt_seed(uint32_t seed) {
    mt[0] = seed;
    for (mt_index = 1; mt_index < MT_N; mt_index++) {
        mt[mt_index] = (1812433253UL * (mt[mt_index - 1] ^ (mt[mt_index - 1] >> 30)) + mt_index);
    }
}

uint32_t mt_rand(void) {
    uint32_t y;
    static const uint32_t mag01[2] = {0x0UL, MT_MATRIX_A};
    if (mt_index >= MT_N) {
        if (mt_index > MT_N) {
             fprintf(stderr, "FATAL: Mersenne Twister not seeded.");
             exit(1);
        }
        for (int i = 0; i < MT_N - MT_M; i++) {
            y = (mt[i] & MT_UPPER_MASK) | (mt[i + 1] & MT_LOWER_MASK);
            mt[i] = mt[i + MT_M] ^ (y >> 1) ^ mag01[y & 0x1UL];
        }
        for (int i = MT_N - MT_M; i < MT_N - 1; i++) {
            y = (mt[i] & MT_UPPER_MASK) | (mt[i + 1] & MT_LOWER_MASK);
            mt[i] = mt[i + (MT_M - MT_N)] ^ (y >> 1) ^ mag01[y & 0x1UL];
        }
        y = (mt[MT_N - 1] & MT_UPPER_MASK) | (mt[0] & MT_LOWER_MASK);
        mt[MT_N - 1] = mt[MT_M - 1] ^ (y >> 1) ^ mag01[y & 0x1UL];
        mt_index = 0;
    }
    y = mt[mt_index++];
    y ^= (y >> 11); y ^= (y << 7) & 0x9d2c5680UL; y ^= (y << 15) & 0xefc60000UL; y ^= (y >> 18);
    return y;
}
// --- End Mersenne Twister ---

#define min(a,b) (((a)<(b))?(a):(b))

// --- Benchmark Data Structures ---
// Graph representation
typedef struct {
    int* neighbors;
    int count; 
} AdjList;
AdjList* adjacency_list;
int* edge_storage;
int num_vertices;
long num_edges;

// Tarjan's algorithm data
int* ids;
int* low;
bool* on_stack;
int* stack;
int stack_pointer;
int timer;
int scc_count;
int final_result;

// --- Benchmark Functions ---
void dfs(int at);

void setup_benchmark(int argc, char *argv[]) {
    if (argc != 4) {
        fprintf(stderr, "Usage: %s <num_vertices> <num_edges> <seed>\n", argv[0]);
        exit(1);
    }
    num_vertices = atoi(argv[1]);
    num_edges = atol(argv[2]);
    uint32_t seed = (uint32_t)atol(argv[3]);

    // --- Graph Generation ---
    mt_seed(seed);
    
    // Pass 1: Count out-degrees to determine memory layout
    int* out_degrees = (int*)calloc(num_vertices, sizeof(int));
    if (!out_degrees) { fprintf(stderr, "Failed to allocate out_degrees\n"); exit(1); }

    for (long i = 0; i < num_edges; i++) {
        int u = mt_rand() % num_vertices;
        out_degrees[u]++;
    }

    // Allocate storage for the graph
    adjacency_list = (AdjList*)malloc(num_vertices * sizeof(AdjList));
    edge_storage = (int*)malloc(num_edges * sizeof(int));
    if (!adjacency_list || !edge_storage) { fprintf(stderr, "Failed to allocate graph storage\n"); exit(1); }

    // Set up adjacency list pointers and counts
    int* current_counts = (int*)calloc(num_vertices, sizeof(int));
    if (!current_counts) { fprintf(stderr, "Failed to allocate current_counts\n"); exit(1); }
    
    long current_offset = 0;
    for (int i = 0; i < num_vertices; i++) {
        adjacency_list[i].neighbors = &edge_storage[current_offset];
        adjacency_list[i].count = out_degrees[i];
        current_offset += out_degrees[i];
    }
    
    // Pass 2: Populate the adjacency list with edges
    mt_seed(seed); // Re-seed to get the same random sequence
    for (long i = 0; i < num_edges; i++) {
        int u = mt_rand() % num_vertices;
        int v = mt_rand() % num_vertices;
        int index_in_u_list = current_counts[u]++;
        adjacency_list[u].neighbors[index_in_u_list] = v;
    }

    free(out_degrees);
    free(current_counts);
    
    // --- Algorithm Data Allocation ---
    ids = (int*)malloc(num_vertices * sizeof(int));
    low = (int*)malloc(num_vertices * sizeof(int));
    on_stack = (bool*)malloc(num_vertices * sizeof(bool));
    stack = (int*)malloc(num_vertices * sizeof(int));

    if (!ids || !low || !on_stack || !stack) {
        fprintf(stderr, "Failed to allocate algorithm data structures\n");
        exit(1);
    }
}

void dfs(int at) {
    stack[stack_pointer++] = at;
    on_stack[at] = true;
    ids[at] = low[at] = timer++;

    for (int i = 0; i < adjacency_list[at].count; i++) {
        int to = adjacency_list[at].neighbors[i];
        if (ids[to] == -1) {
            dfs(to);
            low[at] = min(low[at], low[to]);
        } else if (on_stack[to]) {
            low[at] = min(low[at], ids[to]);
        }
    }

    if (low[at] == ids[at]) {
        while (stack_pointer > 0) {
            int node = stack[--stack_pointer];
            on_stack[node] = false;
            if (node == at) break;
        }
        scc_count++;
    }
}

void run_computation() {
    // Initialize algorithm state
    scc_count = 0;
    timer = 0;
    stack_pointer = 0;
    memset(ids, -1, num_vertices * sizeof(int));
    memset(on_stack, 0, num_vertices * sizeof(bool));

    // Run Tarjan's algorithm
    for (int i = 0; i < num_vertices; i++) {
        if (ids[i] == -1) {
            dfs(i);
        }
    }
    final_result = scc_count;
}

void cleanup() {
    free(edge_storage);
    free(adjacency_list);
    free(ids);
    free(low);
    free(on_stack);
    free(stack);
}

int main(int argc, char *argv[]) {
    struct timespec start, end;

    setup_benchmark(argc, argv);

    clock_gettime(CLOCK_MONOTONIC, &start);
    run_computation();
    clock_gettime(CLOCK_MONOTONIC, &end);

    cleanup();

    double time_taken = (end.tv_sec - start.tv_sec) + (end.tv_nsec - start.tv_nsec) / 1e9;
    
    printf("%d\n", final_result);
    fprintf(stderr, "%.6f", time_taken);

    return 0;
}
